#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

# Positionnez la variable $MENUCONFIG à n'importe quelle valeur pour permettre
# le 'make menuconfig' et personnaliser les options : 
#		MENUCONFIG="pouet" ./linux.recette

set -e
umask 022
CWD=$(pwd)

# On définit la catégorie du paquet :
for categ in base extra opt xfce xorg; do
if [ ! "$(echo $(dirname $CWD) | grep $categ)" = "" ]; then
PKGCAT="$categ"
fi
done


NAMESRC=${NAMESRC:-linux}
VERSION=${VERSION:-2.6.37}
EXT=${EXT:-tar.bz2}
NAMETGZ=${NAMETGZ:-linux}
NAMETGZHEADERS=${NAMETGZHEADERS:-linux-headers}
NAMETGZMODULES=${NAMETGZMODULES:-linux-modules}
BUILD=${BUILD:-1}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets/$PKGCAT}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}

WGET=${WGET:-ftp://ftp.kernel.org/pub/linux/kernel/v2.6/$NAMESRC-$VERSION.$EXT}
##########
SLACKDESC="Le noyau Linux, version ${VERSION}"
SLACKDESCMODULES="Les modules et firmwares du noyau Linux ${VERSION}"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On crée les répertoires d'accueil :
PKG=$TMP/build/${NAMETGZ}
PKGMODULES=$TMP/build/${NAMETGZMODULES}
mkdir -p {${PKG},${PKGMODULES}}/install

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

### 1- On génère le paquet pour le noyau précompilé. ###

# On nettoie obligatoirement :
make mrproper

# On crée le seul répertoire nécessaire :
mkdir -p ${PKG}/boot

# On copie la configuration du noyau (d'une version plus ancienne) :
cat $CWD/config > .config

# On conserve une copie de l'ancienne configuration :
cp -a $CWD/config{,-old} 

# Quoi de neuf ?
make oldconfig

# Configuration plus fine du noyau si $MENUCONFIG est positionnée :
if [ ! "X${MENUCONFIG}" = "X" ]; then
	make menuconfig
fi

# On compile le noyau :
SLKCFLAGS="-pipe"
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
make -j3

# On copie le noyau fraîchement compilé, le fichier System.map et le .config
# dans /boot, agrémentés de leur version et on récupère le '.config' pour nos
# prochains paquets :
cp -a arch/x86/boot/bzImage ${PKG}/boot/noyau-${VERSION}-${RTVERSION}
cp -a System.map ${PKG}/boot/System.map-${VERSION}-${RTVERSION}
cp -a .config ${PKG}/boot/config-${VERSION}-${RTVERSION}
cat .config > $CWD/config

# Puis on crée un lien 'vmlinuz-$VERSION' :
ln -sf noyau-${VERSION}-${RTVERSION} ${PKG}/boot/vmlinuz-${VERSION}

### 2- On génère le paquet pour les modules du noyau. ###

# On crée le seul répertoire nécessaire :
mkdir -p ${PKGMODULES}/etc/rc.d

# On installe les modules noyau :
make modules_install INSTALL_MOD_PATH=${PKGMODULES}

# On supprime les firmwares (ce paquet est en 'extra/' pour tests !) :
rm -rf ${PKGMODULES}/lib/firmware

# On relie enfin les répertoires 'build' et 'source' des modules aux sources du noyau :
rm -rf ${PKGMODULES}/lib/modules/${VERSION}-${RTVERSION}/build
rm -rf ${PKGMODULES}/lib/modules/${VERSION}-${RTVERSION}/source
ln -sf ../../../usr/src/linux-${VERSION}-${RTVERSION} ${PKGMODULES}/lib/modules/${VERSION}-${RTVERSION}/build
ln -sf ../../../usr/src/linux-${VERSION}-${RTVERSION} ${PKGMODULES}/lib/modules/${VERSION}-${RTVERSION}/source

# On installe les slack-desc :
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc
echo "${NAMETGZMODULES}: ${NAMETGZMODULES} (${SLACKDESCMODULES})" > ${PKGMODULES}/install/slack-desc

# On installe le doinst.sh des modules :
cat > ${PKGMODULES}/install/doinst.sh << "EOF"
#!/usr/bin/env bash
# On met à jour les dépendances des modules :
if [ -x sbin/depmod ]; then
	chroot . depmod -a 1> /dev/null 2> /dev/null
fi

EOF

# Empaquetages !
cd ${PKG}
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "$PACKAGING" | fakeroot
else
	su -c "$PACKAGING"
fi

cd ${PKGMODULES}
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZMODULES}-${VERSION}-${ARCH}-$BUILD"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "$PACKAGING" | fakeroot
else
	su -c "$PACKAGING"
fi

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

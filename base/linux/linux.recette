#!/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

# Positionnez la variable $MENUCONFIG à n'importe quelle valeur pour permettre
# le 'make menuconfig' et personnaliser les options : 
#		MENUCONFIG="pouet" ./linux.recette

set -e
umask 022
CWD=$(pwd)

NAMESRC=${NAMESRC:-linux}
VERSION=${VERSION:-2.6.33.7}
RTVERSION=${RTVERSION:-rt29}
EXT=${EXT:-tar.bz2}
NAMETGZ=${NAMETGZ:-linux}
NAMETGZHEADERS=${NAMETGZHEADERS:-linux-headers}
NAMETGZMODULES=${NAMETGZMODULES:-linux-modules}
NAMETGZSOURCE=${NAMETGZSOURCE:-linux-source}
BUILD=${BUILD:-2}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}

WGET=${WGET:-ftp://ftp.kernel.org/pub/linux/kernel/v2.6/$NAMESRC-$VERSION.$EXT}
WGETRTPATCH=${WGETRTPATCH:-ftp://ftp.kernel.org/pub/linux/kernel/projects/rt/patch-$VERSION-$RTVERSION.bz2}
##########
SLACKDESC="Le noyau Linux"
SLACKDESCHEADERS="Les fichiers d'en-tête du noyau Linux"
SLACKDESCMODULES="Les modules et firmwares du noyau Linux"
SLACKDESCSOURCE="Le code source complet du noyau Linux"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On télécharge le patch RT :
if [ ! -r patch-${VERSION}-${RTVERSION}.bz2 ]; then
	wget -vc $WGETRTPATCH -O patch-${VERSION}-${RTVERSION}.bz2.part
	mv patch-${VERSION}-${RTVERSION}.bz2.part patch-${VERSION}-${RTVERSION}.bz2
fi

# On crée les répertoires d'accueil :
PKG=$TMP/build/${NAMETGZ}
PKGHEADERS=$TMP/build/${NAMETGZHEADERS}
PKGMODULES=$TMP/build/${NAMETGZMODULES}
PKGSOURCE=$TMP/build/${NAMETGZSOURCE}
mkdir -p {${PKG},${PKGHEADERS},${PKGMODULES},${PKGSOURCE}}/install

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

### 1- On génère le paquet pour le noyau précompilé. ###

# On nettoie obligatoirement :
make mrproper

# On applique le patch RT :
bzcat $CWD/patch-${VERSION}-${RTVERSION}.bz2 | patch -p1

# Pour en finir avec les erreurs des applications utilisant scsi/scsi.h :
cat $CWD/linux-headers.__u8-scsi.h.patch | patch -p1

# On crée le seul répertoire nécessaire :
mkdir -p ${PKG}/boot

# On copie la configuration du noyau (d'une version plus ancienne) :
cat $CWD/config > .config

# On conserve une copie de l'ancienne configuration :
cp -a $CWD/config{,-old} 

# Quoi de neuf ?
make oldconfig

# Configuration plus fine du noyau si $MENUCONFIG est positionnée :
if [ ! "X${MENUCONFIG}" = "X" ]; then
	make menuconfig
fi

# On compile le noyau :
SLKCFLAGS="-pipe"
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
make -j3 CROSS_COMPILE=x86_64-0-linux-gnu- 

# On copie le noyau fraîchement compilé, le fichier System.map et le .config
# dans /boot, agrémentés de leur version et on récupère le '.config' pour nos
# prochains paquets :
cp -a arch/x86/boot/bzImage ${PKG}/boot/noyau-${VERSION}-${RTVERSION}
cp -a System.map ${PKG}/boot/System.map-${VERSION}-${RTVERSION}
cp -a .config ${PKG}/boot/config-${VERSION}-${RTVERSION}
cat .config > $CWD/config

# Puis on crée un lien 'vmlinuz' pour l'intérêt historique (et pour ne pas casser
# de scripts utilisant le nom de fichier « vmlinuz ») :
ln -sf noyau-${VERSION}-${RTVERSION} ${PKG}/boot/vmlinuz

# On relie l'ensemble des fichiers par défaut à « *-$VERSION » :
ln -sf System.map-${VERSION}-${RTVERSION} ${PKG}/boot/System.map
ln -sf config-${VERSION}-${RTVERSION} ${PKG}/boot/config

### 2- On génère le paquet pour les entêtes du noyau. ###

# On crée le seul répertoire d'accueil :
mkdir -p ${PKGHEADERS}/usr

# Extraction des en-têtes du noyau :
make headers_install INSTALL_HDR_PATH=${PKGHEADERS}/usr

# On supprime les fichiers inutiles :
find ${PKGHEADERS}/usr \( -name .install -o -name ..install.cmd \) -delete

# On corrige le nom du répertoire asm/ en asm-x86/ et on ajoute un lien :
mv ${PKGHEADERS}/usr/include/asm{,-x86}
ln -sf asm-x86 ${PKGHEADERS}/usr/include/asm

### 3- On génère le paquet pour les modules du noyau. ###

# On crée le seul répertoire nécessaire :
mkdir -p ${PKGMODULES}/etc/rc.d

# On installe les modules noyau :
make modules_install INSTALL_MOD_PATH=${PKGMODULES}

# On copie le fichier rc.modules en prenant garde à ne rien écraser :
cat $CWD/rc.modules.new > ${PKGMODULES}/etc/rc.d/rc.modules.new
chmod 755 ${PKGMODULES}/etc/rc.d/rc.modules.new

# On relie enfin les répertoires 'build' et 'source' des modules aux sources du noyau :
rm -rf ${PKGMODULES}/lib/modules/${VERSION}-${RTVERSION}/build
rm -rf ${PKGMODULES}/lib/modules/${VERSION}-${RTVERSION}/source
ln -sf ../../../usr/src/linux-${VERSION}-${RTVERSION} ${PKGMODULES}/lib/modules/${VERSION}-${RTVERSION}/build
ln -sf ../../../usr/src/linux-${VERSION}-${RTVERSION} ${PKGMODULES}/lib/modules/${VERSION}-${RTVERSION}/source

### 3- On génère le paquet des sources du noyau ###

# On crée le seul répertoire nécessaire :
mkdir -p ${PKGSOURCE}/usr/src

# On nettoie les sources :
make mrproper

# On copie toutes les sources et on crée le lien symbolique générique 'linux' :
cp -a $TMP/${NAME} ${PKGSOURCE}/usr/src/${NAME}-${RTVERSION}
ln -sf ${NAME}-${RTVERSION} ${PKGSOURCE}/usr/src/linux

# On copie le fichier de configuration dans les sources :
cat $CWD/config > ${PKGSOURCE}/usr/src/${NAME}-${RTVERSION}/.config

# Installation de la documentation (on crée simplement un lien) :
mkdir -p ${PKGSOURCE}/usr/doc/${NAMETGZSOURCE}-${VERSION}-${RTVERSION}
ln -sf ../../src/${NAMESRC}-${VERSION}-${RTVERSION}/Documentation ${PKGSOURCE}/usr/doc/${NAMETGZSOURCE}-${VERSION}-${RTVERSION}/Documentation
# Il y a un peu de doc pour les firmwares :
mkdir -p ${PKGMODULES}/usr/doc/${NAMETGZMODULES}-${VERSION}-${RTVERSION}
cp -a $TMP/${NAME}/firmware/{README*,WHENCE} ${PKGMODULES}/usr/doc/${NAMETGZMODULES}-${VERSION}-${RTVERSION}

# On installe les slack-desc :
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc
echo "${NAMETGZHEADERS}: ${NAMETGZHEADERS} (${SLACKDESCHEADERS})" > ${PKGHEADERS}/install/slack-desc
echo "${NAMETGZMODULES}: ${NAMETGZMODULES} (${SLACKDESCMODULES})" > ${PKGMODULES}/install/slack-desc
echo "${NAMETGZSOURCE}: ${NAMETGZSOURCE} (${SLACKDESCSOURCE})" > ${PKGSOURCE}/install/slack-desc

# On installe le doinst.sh des modules :
cat > ${PKGMODULES}/install/doinst.sh << "EOF"
#!/bin/env bash
config() {
	NEW="$1"
	OLD="$(dirname $NEW)/$(basename $NEW .new)"
	
	if [ ! -r $OLD ]; then
		mv $NEW $OLD
	elif [ "$(cat $OLD | md5sum)" = "$(cat $NEW | md5sum)" ]; then
		rm $NEW
	fi
}

config etc/rc.d/rc.modules.new

# On sauvegarde rc.modules si c'est un fichier à part entière et non un lien,
# puis on lie à la version :
if [ -r etc/rc.d/rc.modules ]; then
	if [ ! -L etc/rc.d/rc.modules ]; then
		cp -a etc/rc.d/rc.modules etc/rc.d/rc.modules.bak
	else
		ln -sf rc.modules-${VERSION}_${RTVERSION} etc/rc.d/rc.modules
	fi
fi

# On met à jour les dépendances des modules :
if [ -x sbin/depmod ]; then
	chroot . depmod -a 1> /dev/null 2> /dev/null
fi

EOF

# On installe le doinst.sh des sources :
cat > ${PKGSOURCES}/install/doinst.sh << EOF
#!/bin/env bash
chroot . make -C /usr/src/linux-${VERSION} clean oldconfig prepare
rm -f usr/src/linux-${VERSION}/.version

EOF

# Empaquetages !
cd ${PKG}
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}_${RTVERSION}-${ARCH}-$BUILD"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "$PACKAGING" | fakeroot
else
	su -c "$PACKAGING"
fi

cd ${PKGHEADERS}
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZHEADERS}-${VERSION}_${RTVERSION}-${ARCH}-$BUILD"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "$PACKAGING" | fakeroot
else
	su -c "$PACKAGING"
fi

cd ${PKGMODULES}
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZMODULES}-${VERSION}_${RTVERSION}-${ARCH}-$BUILD"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "$PACKAGING" | fakeroot
else
	su -c "$PACKAGING"
fi

cd ${PKGSOURCE}
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZSOURCE}-${VERSION}_${RTVERSION}-${ARCH}-$BUILD
	rm -rf ${PKG} ${PKGHEADERS} ${PKGMODULES} ${PKGSOURCE}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

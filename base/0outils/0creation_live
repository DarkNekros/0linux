#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022

unset PLOP MNTTYPE

# En cas d'erreur dans la ligne de commande :
syntaxerror() {
	echo "Syntaxe :"
	echo ""
	echo "[SOURCES=/quelque/part] [PAQUETS=/quelque/part] $0 --dvd [VERSION]"
	echo "[SOURCES=/quelque/part] [PAQUETS=/quelque/part] $0 --usb PÉRIPHÉRIQUE"
	echo ""
	echo "Où SOURCES et PAQUETS désignent respectivement les emplacements des"
	echo "sources et paquets de 0 (contenant 'base/' 'opt/' 'installateur/' etc.)"
	echo "Emplacements par défaut : '/0/sources' et '/0/paquets'."
	echo ""
	echo "Où VERSION est une version, au choix de l'utilisateur. Si la version"
	echo "n'est pas renseignée, la date (« JJMMAAAA ») est la valeur par défaut."
	echo ""
	echo "Où PÉRIPHÉRIQUE ne doit pas désigner une partition mais bien un"
	echo "périphérique, sans aucune numérotation (/dev/sdd et non /dev/sdd1 par ex.)."
	echo ""
	echo "Créer une image ISO de DVD portant la version \"beta42\" :"
	echo "	$0 --dvd beta42"
	echo "Créer une clé USB, déjà formatée en FAT, FAT32, NTFS, ext2/3/4 ou btrfs :"
	echo "	$0 --usb /dev/sdc"
	echo "Créer une clé USB minimale, sans aucun paquet :"
	echo "	$0 --usb /dev/sdc --mini"
	echo "Créer un DVD minimal, sans aucun paquet, versionné \"beta42\" :"
	echo "	$0 --dvd beta42 --mini"
	echo ""
	
	exit 1
}
		
# On vérifie qu'on est bien root :
if [ ! "$(whoami)" = "root" ]; then
	echo "Erreur : seul root peut m'exécuter !"
	exit 1
fi

# On analyse la ligne de commande :
if [ "$1" = "--usb" ]; then
	if [ ! "$(echo $2 | grep -E '1|2|3|4|5|6|7|8|9|0')" = "" ]; then
		syntaxerror
	elif [ "$(echo $2 | grep dev)" = "" ]; then
		syntaxerror
	else
		# Si le volume est en FAT, on doit utiliser 'syslinux' :
		if [ ! "$(blkid -s TYPE ${2}1 | grep -i -E 'fat|ntfs')" = "" ]; then
			SYSLINUXDIR="syslinux"
			SYSLINUXCMD="syslinux-nomtools --install"
		# Si le volume est en ext2/3/4 ou btrfs, on doit utiliser 'extlinux'
		elif [ ! "$(blkid -s TYPE ${2}1 | grep -i -E 'ext2|ext3|ext4|btrfs')" = "" ]; then
			SYSLINUXDIR="extlinux"
			SYSLINUXCMD="extlinux --install"
		else
			echo "Erreur : le périphérique $2 n'est pas formaté correctement."
			echo "Celui-ci doit être formaté en FAT, FAT32, NTFS, ext2/3/4 ou btrfs.."
			exit 1
		fi
	fi
# Si le volume est une image ISO, on doit utiliser 'isolinux' :
elif [ "$1" = "--dvd" ]; then
	if [ ! "$2" = "" ]; then
		VERSION="$2"
	else
		VERSION="$(date +%d%m%Y)"
	fi
	SYSLINUXDIR="isolinux"
else
	syntaxerror
fi

# On analyse la présence de "--mini" :
if [ ! "$3" = "" ]; then
	if [ ! "$3" = "--mini" ]; then
		syntaxerror
	else
		# On vérifie que le répertoire $PAQUETS existe :
		if [ ! -d ${PAQUETS} ]; then
			echo "'${dir}' est introuvable. Arrêt."
			exit 1
		else
			MINI="oui"
		fi
	fi
fi
		
# On quitte si le réperoire des sources n'existe pas :
if [ ! -d "${SOURCES}" ]; then
	echo "'${SOURCES}' est introuvable. Arrêt."
	exit 1
fi

SOURCES=${SOURCES:-/0/sources}
TMP=${TMP:-/usr/local/temp}

LIVEOS=${LIVEOS:-$TMP/liveos}
MEDIAROOT=${MEDIAROOT:-$TMP/mediaroot}
ISODIR=${ISODIR:-$TMP/iso}
INITRDGZ=${INITRDGZ:-$TMP/initrd}
NOYAU=${NOYAU:-$TMP/noyau}

rm -rf $TMP/*
mkdir -p $TMP

# On crée et on vide les répertoires d'accueil :
rm -rf ${MEDIAROOT} ${LIVEOS} ${NOYAU} ${INITRDGZ}
rm -f ${ISODIR}/0linux-${VERSION}-DVD.iso
mkdir -p ${LIVEOS} ${ISODIR} 
mkdir -p ${MEDIAROOT}/{boot/${SYSLINUXDIR},0/paquets}

# On installe les paquets pour le système temporaire :
echo "Installation du système temporaire en cours... "

# base :
echo -n "base... "
for paq in $(find ${PAQUETS}/base -type f \! -name "linux-source*" | sort); do
	spackadd --quiet --root=${LIVEOS} ${paq} &>/dev/null 2>&1
done

# xorg :
echo -n "xorg... "
spackadd --quiet --root=${LIVEOS} ${PAQUETS}/xorg/{libxcb*,freetype*,libX*,x11-libs*,libSM*,libICE*}.spack &>/dev/null 2>&1

# opt :
echo -n "opt... "
for paq in bc-* berkeley-db* dbus-1* expat* gcc* glib2* gmp* lesstif* libgcrypt* libgpg-error* \
libidn* libpng* libssh2* mpc* mpfr* popt* python-2* ruby*; do
	
	spackadd --quiet --root=${LIVEOS} ${PAQUETS}/opt/${paq}.spack &>/dev/null 2>&1
	
done

echo -n "Nettoyage... "
# On copie les bibliothèques requises en dépendances pour les isoler :
mkdir -p ${LIVEOS}/conserver/{,usr/}lib64

for libbb in libICE.so* libSM.so* libX11.so* libXaw*.so* libXmu.so* libXt.so* \
libbz2.so* libdb-*.so* libdbus-1.so* libexpat.so* libfreetype.so* libgcc_s.so* \
libgcj.so* libglib-2.0.so* libgmp.so* libgobject-2.0.so* libgomp.so* libgpm.so*\
libgthread-2.0.so* libidn.so* libpopt.so* libpython*.so* libmpc.so* libmpfr.so* libssh2.so* \
libstdc++.so* libperl.so* libz.so* libxcb.so* libfreetype.so* libdb-5*.so*; do
	
	find ${LIVEOS}/lib64 -name "${libbb}" -exec cp -a {} ${LIVEOS}/conserver/lib64 \;
	find ${LIVEOS}/usr/lib64 -name "${libbb}" -exec cp -a {} ${LIVEOS}/conserver/usr/lib64 \;
	
done

# On copie les modules réseau et les firmwares en lieu sûr :
cp -ar ${LIVEOS}/lib/firmware ${LIVEOS}/conserver
cp -ar ${LIVEOS}/lib/modules/$(uname -r)/kernel ${LIVEOS}/conserver

# On récupère le minimum de l'éditeur 'vim' (on dispose aussi de 'nano') :
cp -a ${LIVEOS}/usr/bin/vim ${LIVEOS}/conserver
cp -ar ${LIVEOS}/usr/share/vim/lang/fr ${LIVEOS}/conserver
cp -a ${LIVEOS}/etc/vimrc ${LIVEOS}/conserver

# On supprime la vérification orthographique et GPM de 'vim' :
sed -i "s@set spell@\" &@g" ${LIVEOS}/conserver/vimrc
sed -i "s@set mouse=a@\" &@g" ${LIVEOS}/conserver/vimrc

# On désinstalle les paquets superflus, maintenant qu'on a les bibliothèques en lieu sûr :
# opt
for paq in bc-* dbus-1* expat* gcc* glib2* gmp* lesstif* libgcrypt* libgpg-error* \
libidn* libpng* python-2* ruby* mpfr* mpc* libssh2* berkeley-db*; do
	
	chroot ${LIVEOS} spackrm /var/log/paquets/${paq} &>/dev/null 2>&1
	
done

# xorg
chroot ${LIVEOS} spackrm /var/log/paquets/{libX*,libxcb*,freetype*,x11-libs*,libSM*,libICE*} &>/dev/null 2>&1

# base
for paq in multiarch_wrapper* vim* bzip2* zlib* tar* gpm* \
linux-entetes* dhcp-* perl* infozip* gfxboot* dialog* libxml2* sgml-common* \
linux-modules* popt* binutils* tree* vim*; do
	
	chroot ${LIVEOS} spackrm /var/log/paquets/${paq} &>/dev/null 2>&1
	
done

# On ramène les bibliothèques :
cp -a ${LIVEOS}/conserver/usr/lib64/* ${LIVEOS}/usr/lib64/
cp -a ${LIVEOS}/conserver/lib64/* ${LIVEOS}/lib64/

# On ramène le nécesaire pour 'vim' : 
cp -a ${LIVEOS}/conserver/vim ${LIVEOS}/usr/bin/
mkdir -p ${LIVEOS}/usr/share/vim/lang/
cp -ar ${LIVEOS}/conserver/fr ${LIVEOS}/usr/share/vim/lang/
cp -a ${LIVEOS}/conserver/vimrc ${LIVEOS}/etc/

# On ramène les modules et les firmware : 
mkdir -p ${LIVEOS}/lib/modules/$(uname -r)
cp -ra ${LIVEOS}/conserver/firmware ${LIVEOS}/lib/
cp -ra ${LIVEOS}/conserver/kernel ${LIVEOS}/lib/modules/$(uname -r)/

# On peut supprimer notre sauvegarde :
rm -rf ${LIVEOS}/conserver

# On allège : les bibliothèques 32 bits sous '/lib' :
rm -f ${LIVEOS}/lib/*.{a,la,so.*,so}
# La documentation :
rm -rf ${LIVEOS}/usr/doc/*
# La documentation pour 'gtk-doc' :
rm -rf ${LIVEOS}/usr/share/gtk-doc/*
# Les bibliothèques 32 bits :
rm -rf ${LIVEOS}/usr/lib/*
# Toutes les bibliothéques statiques et pour 'libtool' :
find ${LIVEOS} -type f -name "*.a" -delete
find ${LIVEOS} -type f -name "*.la" -delete
# Tous les fichiers entêtes :
rm -rf ${LIVEOS}/usr/include/*

echo "Copie des fichiers..."
# On copie nos fichiers spéciaux pour le Live :
install -m 644 ${SOURCES}/installateur/initrd/fstab ${LIVEOS}/etc
install -m 755 ${SOURCES}/installateur/initrd/{HOSTNAME,profile} ${LIVEOS}/etc
install -m 755 ${SOURCES}/installateur/initrd/rc.* ${LIVEOS}/etc/rc.d

# On copie l'installateur et l'aide :
install -m 755 ${SOURCES}/installateur/scripts/{installateur,*.sh} ${LIVEOS}/sbin
install -m 644 ${SOURCES}/installateur/scripts/aide.txt ${LIVEOS}

# On crée le lien pour 'init' :
ln -sf sbin/init ${LIVEOS}/init

# On s'assure de la présence de 'bash' :
if [ -r ${LIVEOS}/bin/bash4.new ]; then
	mv ${LIVEOS}/bin/bash{4.new,}
fi

# On met à jour les liens des bibliothèques :
chroot ${LIVEOS} /sbin/ldconfig

# On met à jour les dépendances des modules :
chroot ${LIVEOS} depmod -a

# On évite le lancement du réseau : 
chmod -x ${LIVEOS}/etc/rc.d/rc.reseau

# On déplace et on renomme le nouveau noyau sans sa version :
rm -f ${NOYAU}
mv ${LIVEOS}/boot/noyau-* ${NOYAU}

# On positionne le fuseau à Paris car on est franco-français et chauvin :
echo "localtime" > ${LIVEOS}/etc/hardwareclock
ln -sf ../usr/share/zoneinfo/Europe/Paris ${LIVEOS}/etc/localtime

# On crée l'initrd :
echo -n "Création de l'initrd... "
rm -f ${INITRDGZ}
cd ${LIVEOS}
find . | cpio -o -H newc | xz --x86 --check=crc32 --lzma2=dict=32MiB > ${INITRDGZ}
echo "Terminé."

echo "Copie du noyau, de l'initrd et des paquets éventuels..."
# On copie le noyau et l'initrd :
cp -a ${INITRDGZ} ${NOYAU} ${MEDIAROOT}/boot/

# On copie tous les paquets sauf si on génère un support minimal :
if [ ! "${MINI}" = "oui" ]; then
	rsync -au --delete-after ${PAQUETS}/* ${MEDIAROOT}/0/paquets
fi

echo "Copie du chargeur d'amorçage..."
mkdir -p ${MEDIAROOT}/boot/${SYSLINUXDIR}
# On copie tous les fichiers de ${SYSLINUXDIR}/ :
cp -ra ${SOURCES}/installateur/${SYSLINUXDIR}/* ${MEDIAROOT}/boot/${SYSLINUXDIR}/

# On copie les modules binaires de 'syslinux' :
cp -a /usr/share/syslinux/{{chain,config,hdt,kbdmap,linux,reboot,vesamenu}.c32,isolinux.bin} ${MEDIAROOT}/boot/${SYSLINUXDIR}/
chmod +x ${MEDIAROOT}/boot/${SYSLINUXDIR}/*.c32

# On s'assure des permissions :
chown -R root:root ${MEDIAROOT}/* 2> /dev/null || true

# Si c'est une image ISO qu'on génère :
if [ "$1" = "--dvd" ]; then
	mkisofs -o ${ISODIR}/0linux-${VERSION}-DVD.iso \
		-A "DVD 0linux" \
		-b boot/isolinux/isolinux.bin \
		-c boot/isolinux/boot.cat \
		-d \
		-J \
		-l \
		-N \
		-R \
		-V "0linux" \
		-boot-load-size 4 \
		-boot-info-table \
		-hide-rr-moved \
		-no-emul-boot \
		${MEDIAROOT}

	echo "L'image '${ISODIR}/0linux-${VERSION}-DVD.iso' a été créée ."
	exit 0

# Si l'on crée une clé USB :
elif [ "$1" = "--usb" ]; then
	
	# On s'assure que la clé est bien démontée :
	umount ${2}1 2>/dev/null
	
	# On monte la clé, sans la presser :
	echo "La clé utilisée sera ${2}."
	echo "Appuyez sur ENTRÉE pour confirmer la création de la clé"
	echo "ou bien appuyez sur CTRL+C pour annuler maintenant."
	read PLOP;
		
	# On doit monter explicitement en lecture-écriture pour NTFS :
	if [ ! "$(blkid -s TYPE ${2}1 | grep -i -E 'ntfs')" = "" ]; then
		MNTTYPE="-t ntfs-3g -o rw"
	fi
	
	mount ${MNTTYPE} ${2}1 /mnt/tmp 2>&1 || exit 1
	sleep 4
	
	# On copie tout ${MEDIAROOT} sur la clé :
	echo -n "Création du volume... "
	rsync -au --delete-after ${MEDIAROOT}/* /mnt/tmp
	echo "terminée. "

	# On nettoie la clé et on dévérouille 'ldlinux.sys' :
	echo -n "Nettoyage du volume... "
	for f in $(find /mnt/tmp -name "ldlinux.sys" -print); do
		chattr -i ${f}
		rm -f ${f}
	done
	echo "terminé."
	
	echo "Installation du chargeur d'amorçage... "
	# On copie un MBR propre :
	cat /usr/share/syslinux/mbr.bin > ${2}
	
	# On installe enfin 'syslinux/extlinux' :
	if [ "${SYSLINUXCMD}" = "extlinux" ]; then
		${SYSLINUXCMD} --install /mnt/tmp/boot/${SYSLINUXDIR}
	elif [ "${SYSLINUXCMD}" = "syslinux" ]; then
		${SYSLINUXCMD} --install ${2}1 -d /boot/${SYSLINUXDIR}
	fi
	
	# On démonte la clé :
	echo -n "Démontage du volume... "
	umount /mnt/tmp
	echo "OK. Volume USB créé sur ${2}."
fi

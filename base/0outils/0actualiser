#!/usr/bin/env bash

set -e
TMP=/tmp
CONFIGDIR=/etc/0outils/apps

# On charge les fonctions de l'interface utilisateur, selon l'appel du script :
if [ "$0" = "/sbin/0actualiser_zenity" ]; then
	. /usr/share/0outils/0actualiser_fonctions_zenity.sh
else
	. /usr/share/0outils/0actualiser_fonctions_terminal.sh
fi

# Seul root peut lancer 'zer' :
if [ ! "$(whoami)" = "root" ]; then
	echo "Seul root peut lancer '$0'."
	exit 1
fi

# Si un paramètre est entré :
if [ ! "$1" = "" ]; then
	utilisation
	exit 0
fi

# On nettoie :
rm -f $TMP/*.log

crunch() {
	read TEXTE;
	echo $TEXTE;
}

patienter

# L'URL précise du dépôt de paquets : chemin contenant les catégories de paquets
# ('base', 'opt', 'extra', etc.) avec ou sans la barre oblique de fin :
RSYNCREPO=${RSYNCREPO:-rsync://ftp.igh.cnrs.fr/0linux/0/paquets}
FTPREPO=${FTPREPO:-http://ftp.igh.cnrs.fr/pub/os/linux/0linux/0/paquets}

# On se crée d'emblée une liste du dépôt local :
find /var/log/paquets/ -type f -exec basename {} \; | sort > $TMP/local.log

# Pour chaque catégorie du système :
for categ in base opt xorg; do
	
	# On crée la liste des paquets distants de la catégorie :
	rsync -a ${RSYNCREPO}/${categ}/* | sed -e 's/\(^.*\) \(.*\)\(\.spack$\)/\2/p' -n > $TMP/${categ}.log

	# Pour chaque paquet déjà installé sur le système :
	cat $TMP/local.log | while read paquet_present; do
		
		# Si on trouve son équivalent par le nom dans la liste du serveur :
		if [ "$(grep $(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\1/p' -n) $TMP/${categ}.log | wc -l)" != "0" ]; then
			grep $(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\1/p' -n) $TMP/${categ}.log \
				> $TMP/grep_paquet_distant.log 2>/dev/null || true
			
			# Pour chaque correspondance trouvée :
			cat $TMP/grep_paquet_distant.log | while read grep_paquet_distant; do
				
				# Si l'occurrence n'est pas vide :
				if [ ! "${grep_paquet_distant}" = "" ]; then
					
					# Positionnement des variables pour les paquets présents :
					nom_paquet_present="$(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\1/p' -n)"
					version_paquet_present="$(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\2/p' -n)"
					arch_paquet_present="$(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\3/p' -n)"
					build_paquet_present="$(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\4/p' -n)"
			
					# Positionnement des variables pour les paquets distants :
					nom_paquet_distant="$(echo ${grep_paquet_distant} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\1/p' -n)"
					version_paquet_distant="$(echo ${grep_paquet_distant} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\2/p' -n)"
					arch_paquet_distant="$(echo ${grep_paquet_distant} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\3/p' -n)"
					build_paquet_distant="$(echo ${grep_paquet_distant} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\4/p' -n)"
				
					# Si les *noms* des paquets sont rigoureusement identiques :
					if [ "${nom_paquet_present}" = "${nom_paquet_distant}" ]; then
						
						# Si l'on trouve plus d'une occurrence exacte, le dépôt local est incorrect, on quitte :
						if [ "$(echo ${paquet_distant} | wc -l)" -gt 1 ]; then
							depot_corrompu
							exit 1
						fi
						
						# Si l'architecture est différente, on a un sérieux problème :
						if [ ! "${arch_paquet_distant}" = "${arch_paquet_present}" ]; then
							architectures_corrompues
							exit 1
						fi
						
						# Si la version ou le compteur sont différents, on met en attente pour mise à niveau :
						if [ ! "${version_paquet_distant}" = "${version_paquet_present}" -o \
							! "${build_paquet_distant}" = "${build_paquet_present}" ]; then
							echo ${categ}/${grep_paquet_distant} >> $TMP/paquets_a_installer.log
							
							# On crée un message pour l'utilisateur de la forme « paquet 1.0.3 -> 1.2.4 » :
							echo "${categ} : ${nom_paquet_present} ${version_paquet_present}-${build_paquet_present} -> ${version_paquet_distant}-${build_paquet_distant}" >> $TMP/messages_a_installer.log
						fi
					fi
				fi
			done
		# Si aucune occurrence n'a été trouvée, on passe à l'itération suivante :
		else
			continue
		fi
	done
done

# Et pour chaque dépôt de paquets installé :
for appcateg in $(find ${CONFIGDIR} -mindepth 1 -type f | sort); do
	
	# On crée la liste des paquets distants de la catégorie :
	rsync -a ${RSYNCREPO}/apps/$(basename ${appcateg})/* | sed -e 's/\(^.*\) \(.*\)\(\.spack$\)/\2/p' -n > $TMP/$(basename ${appcateg}).log

	# Pour chaque paquet déjà installé sur le système :
	cat $TMP/local.log | while read paquet_present; do
		
		# Si on trouve son équivalent par le nom dans la liste du serveur :
		if [ "$(grep $(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\1/p' -n) $TMP/$(basename ${appcateg}).log | wc -l)" != "0" ]; then
			grep $(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\1/p' -n) $TMP/$(basename ${appcateg}).log \
				> $TMP/grep_paquet_distant.log 2>/dev/null || true
				
			# Pour chaque correspondance trouvée :
			cat $TMP/grep_paquet_distant.log | while read grep_paquet_distant; do
				
				# Si l'occurrence n'est pas vide :
				if [ ! "${grep_paquet_distant}" = "" ]; then
					
					# Positionnement des variables pour les paquets présents :
					nom_paquet_present="$(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\1/p' -n)"
					version_paquet_present="$(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\2/p' -n)"
					arch_paquet_present="$(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\3/p' -n)"
					build_paquet_present="$(echo ${paquet_present} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\4/p' -n)"
			
					# Positionnement des variables pour les paquets distants :
					nom_paquet_distant="$(echo ${grep_paquet_distant} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\1/p' -n)"
					version_paquet_distant="$(echo ${grep_paquet_distant} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\2/p' -n)"
					arch_paquet_distant="$(echo ${grep_paquet_distant} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\3/p' -n)"
					build_paquet_distant="$(echo ${grep_paquet_distant} | sed 's/\(.*\)-\(.*\)-\(.*\)-\(.*\)$/\4/p' -n)"
				
					# Si les *noms* des paquets sont rigoureusement identiques :
					if [ "${nom_paquet_present}" = "${nom_paquet_distant}" ]; then
						
						# Si l'on trouve plus d'une occurrence exacte, le dépôt local est incorrect, on quitte :
						if [ "$(echo ${paquet_distant} | wc -l)" -gt 1 ]; then
							depot_corrompu
							exit 1
						fi
						
						# Si l'architecture est différente, on a un sérieux problème :
						if [ ! "${arch_paquet_distant}" = "${arch_paquet_present}" ]; then
							architectures_corrompues
							exit 1
						fi
						
						# Si la version ou le compteur sont différents, on met en attente pour mise à niveau :
						if [ ! "${version_paquet_distant}" = "${version_paquet_present}" -o \
							! "${build_paquet_distant}" = "${build_paquet_present}" ]; then
							echo "apps/$(basename ${appcateg})/${grep_paquet_distant}" >> $TMP/paquets_a_installer.log
							
							# On crée un message pour l'utilisateur de la forme « paquet 1.0.3 -> 1.2.4 » :
							echo "$(basename ${appcateg}) : ${nom_paquet_present} ${version_paquet_present}-${build_paquet_present} -> ${version_paquet_distant}-${build_paquet_distant}" >> $TMP/messages_a_installer.log
						fi
					fi
				fi
			done
		# Si aucune occurrence n'a été trouvée, on passe à l'itération suivante :
		else
			continue
		fi
	done
done

# S'il y a des mises à niveau en attente :
if [ -r $TMP/paquets_a_installer.log ]; then
	NBINSTALLPKG="$(cat $TMP/paquets_a_installer.log | wc -l)"
	if [ "${NBINSTALLPKG}" -gt 0 ]; then
		
		# Si 'eglibc' a changé, on arrête tout et on conseille de mettre à niveau via l'OS autonome :
		if [ ! "$(grep eglibc $TMP/paquets_a_installer.log)" = "" ]; then
			eglibc_detecte
			exit 0
		fi
		
		# Récapitulatif :
		recapitulatif_a_installer
		read CONFIRMUPGRADE;
		
		# Si l'on a confirmation :
		if [ "$(echo ${CONFIRMUPGRADE} | tr '[A-Z]' '[a-z]')" = "oui" ]; then
			
			# S'il y a des installations en attente :
			cat $TMP/paquets_a_installer.log | while read paq; do
				
				# On télécharge chaque paquet silencieusement :
				if [ ! -e /0/paquets/$(basename ${paq}).spack ]; then
					wget -cq ${FTPREPO}/${paq}.spack -O /0/paquets/$(basename ${paq}).spack.part
					mv /0/paquets/$(basename ${paq}).spack{.part,}
				fi
				
				# On montre la description :
				paquet_description
				
				# On installe/met à niveau :
				spackadd /0/paquets/$(basename ${paq}).spack &>/dev/null 2>&1
				
				# On nettoie derrière nous:
				rm -f /0/paquets/$(basename ${paq}).spack
			done
				
		# Sinon, on quitte simplement :
		else
			# On nettoie :
			rm -f $TMP/*.log
			exit 0
		fi
	fi
else
	# On n'a rien trouvé, le système est donc à jour  :
	systeme_a_jour
	
	# On nettoie et on quitte :
	rm -f $TMP/*.log
	exit 0
fi

exit 0

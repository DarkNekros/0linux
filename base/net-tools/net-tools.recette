#!/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)

NAMESRC=${NAMESRC:-net-tools}
VERSION=${VERSION:-1.60}
EXT=${EXT:-tar.bz2}
NAMETGZ=${NAMETGZ:-net-tools}
BUILD=${BUILD:-1}


TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-http://www.tazenda.demon.co.uk/phil/$NAMESRC/$NAMESRC-$VERSION.$EXT}
DOC="README*"
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Outils réseau pour Linux"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then # -1 pour l'UTF-8
	echo "La description du slack-desc est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On applique 3 correctifs de LFS pour la compilation avec les noyaux 2.6 :
cat $CWD/net-tools-1.60-kernel_headers-2.patch | patch -p1
cat $CWD/net-tools-1.60-mii_ioctl-1.patch | patch -p1
cat $CWD/net-tools-1.60-gcc34-3.patch | patch -p1

# Configuration un peu spéciale :
yes "" | make config
sed -i -e 's|HAVE_IP_TOOLS 0|HAVE_IP_TOOLS 1|g' -e 's|HAVE_MII 0|HAVE_MII 1|g' config.h
sed -i -e 's|# HAVE_IP_TOOLS=0|HAVE_IP_TOOLS=1|g' -e 's|# HAVE_MII=0|HAVE_MII=1|g' config.make

# Compilation tout aussi exotique :
SLKCFLAGS="-O2 -fPIC -pipe"
CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
make

# 'make install' à la main !
mkdir -p ${PKG}/{bin,sbin} ${PKG}/usr/sbin
mkdir -p ${PKG}/usr/man/man{1,5,8}

# On copie les binaires où il faut :
cp -a {arp,rarp,ifconfig,route,mii-tool,nameif,plipconfig,ipmaddr,iptunnel} ${PKG}/sbin
cp -a {hostname,netstat} ${PKG}/bin
cp -a slattach ${PKG}/usr/sbin

# On rend le tout exécutable :
chmod 755 ${PKG}/{bin,sbin}/* ${PKG}/usr/sbin/*

# On crée quelques binaires pointant sur 'hostname' - et non en dur :
rm -f ${PKG}/bin/dnsdomainname
rm -f ${PKG}/bin/nisdomainname
rm -f ${PKG}/bin/ypdomainname
ln -sf hostname ${PKG}/bin/dnsdomainname
ln -sf hostname ${PKG}/bin/nisdomainname
ln -sf hostname ${PKG}/bin/ypdomainname

# On inclut le programme de Slackware pour l'extraction de données réseau :
cc -O2 -o ${PKG}/bin/ipmask $CWD/ipmask.c
chmod 755 ${PKG}/bin/ipmask

# On copie son manuel :
cp -a $CWD/ipmask.8 ${PKG}/usr/man/man8

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# Installation de la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
cp -a ${DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true

# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

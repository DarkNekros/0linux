#!/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)

NAMESRC=${NAMESRC:-sysvinit}
VERSION=${VERSION:-2.86}
EXT=${EXT:-tar.gz}
NAMETGZ=${NAMETGZ:-sysvinit}
BUILD=${BUILD:-2}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}

WGET=${WGET:-ftp://ftp.cistron.nl/pub/people/miquels/$NAMESRC/$NAMESRC-$VERSION.$EXT}
DOC="COPYRIGHT README doc/Changelog doc/Install doc/Propaganda doc/bootlogd.README src/initscript.sample"
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Programmes d'initialisation système System V"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# L'init statique a des problèmes en x86_64 :
sed -i -e "s/-static//" src/Makefile

# On corrige les vieillissants problèmes découverts dans sysvinit :
cat $CWD/sysvinit-2.86-fixes-1.patch | patch -p1

# Pour en finir avec les messages anglophones codés en dur les plus fréquents :
sed -i -e 's/respawning too fast: disabled for %d minutes/est rafraichi trop rapidement : il sera inactif pendant %d minutes./' \
	-e 's/Sending processes the TERM signal/Envoi du signal TERM aux processus.../' \
	-e 's/Sending processes the KILL signal/Envoi du signal KILL aux processus.../' src/init.c
	
# On ne compile pas 'wall' car "util-linux-ng" l'inclut déjà :
sed -i -e 's/utmpdump wall/utmpdump/' \
	-e 's/mountpoint.1 wall.1/mountpoint.1/' src/Makefile

# Compilation pour 64 bits :
SLKCFLAGS="-O2 -fPIC -pipe"
LIBDIRSUFFIX="64"
CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
make -C src

# 'make install' à la main !
mkdir -p ${PKG}/{bin,sbin,usr}
mkdir -p ${PKG}/usr/{bin,include}
mkdir -p ${PKG}/usr/man/man{1,5,8}

# On copie les binaires où il faut selon le 'make install' et on inclut 'sulogin'
# à la différence du paquet "shadow" :
cp -a src/mountpoint ${PKG}/bin
chmod 755 ${PKG}/bin/mountpoint

for i in init halt shutdown runlevel killall5 sulogin bootlogd; do
	cp -a src/${i} ${PKG}/sbin
	chmod 755 ${PKG}/sbin/${i}
done

for i in last mesg utmpdump; do
	cp -a src/${i} ${PKG}/usr/bin
	chmod 755 ${PKG}/usr/bin/${i}
done

# On n'oublie pas les liens symboliques :
ln -sf halt ${PKG}/sbin/reboot
ln -sf halt ${PKG}/sbin/poweroff
ln -sf init ${PKG}/sbin/telinit
ln -sf ../sbin/killall5 ${PKG}/bin/pidof
ln -sf last ${PKG}/usr/bin/lastb
# ... en restant compatible avec Slackware :
ln -sf ../../bin/mountpoint ${PKG}/usr/bin/mountpoint

# On copie le fichier en-tête :
cp -a src/initreq.h ${PKG}/usr/include
chmod 644 ${PKG}/usr/include/initreq.h

# On copie les manuels :
for section in 1 5 8; do
	cp -a man/*.$section $PKG/usr/man/man$section
done

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# Installation de la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
cp -a ${DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

config() {
	NEW="$1"
	OLD="`dirname $NEW`/`basename $NEW .new`"
	if [ ! -r $OLD ]; then
		mv $NEW $OLD
	elif [ "`cat $OLD | md5sum`" = "`cat $NEW | md5sum`" ]; then
		rm $NEW
	fi
}

# Si le fichier journal pour les échecs de connexion n'existe pas, on le crée :
if [ ! -r var/log/btmp ]; then
	( cd var/log ; umask 077 ; touch btmp )
fi

if [ -x sbin/init ]; then
	sbin/init u
fi

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true

# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

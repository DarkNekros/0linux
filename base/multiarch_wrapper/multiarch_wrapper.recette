#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)

# On définit la catégorie du paquet :
for categ in base extra opt xfce xorg; do
if [ ! "$(echo $(dirname $CWD) | grep $categ)" = "" ]; then
PKGCAT="$categ"
fi
done


NAMESRC=${NAMESRC:-multiarch_wrapper}
VERSION=${VERSION:-0.1}
NAMETGZ=${NAMETGZ:-multiarch_wrapper}
BUILD=${BUILD:-1}


TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets/$PKGCAT}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}

########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Programme enveloppe multi-architecture"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}/usr/bin

# On crée le programme enveloppe :
cat > $TMP/multiarch_wrapper.c << "EOF"
#define _GNU_SOURCE

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#ifndef DEF_SUFFIX
#	define DEF_SUFFIX "64"
#endif

int main(int argc, char **argv)
{
	char *filename;
	char *suffix;
	
	if(!(suffix = getenv("USE_ARCH")))
		if(!(suffix = getenv("BUILDENV")))
			suffix = DEF_SUFFIX;
	
	if (asprintf(&filename, "%s-%s", argv[0], suffix) < 0) {
		perror(argv[0]);
		return -1;
	}
	
	int status = EXIT_FAILURE;
	pid_t pid = fork();
	
	if (pid == 0) {
		execvp(filename, argv);
		perror(filename);
		goto end;
	} else if (pid < 0) {
		goto end_error;
	} else {
		if (waitpid(pid, &status, 0) != pid) {
			status = EXIT_FAILURE;
			goto end_error;
		}
		status = WEXITSTATUS(status);
	}
	
	goto end;

	end_error:
		perror(argv[0]);

	end:
		free(filename);
	
	return status;
}

EOF

# Compilation :
cd $TMP
SLKCFLAGS="-O2 -fPIC -pipe"
CFLAGS="${SLKCFLAGS}" \
gcc ${BUILD64} multiarch_wrapper.c -o ${PKG}/usr/bin/multiarch_wrapper

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true




# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	
	spackpkg . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi
	rm -f $TMP/multiarch_wrapper.c"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

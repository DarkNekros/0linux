#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)
PKGCAT="apps/$(basename $(dirname $CWD))"
NAMESRC=${NAMESRC:-mplayer-skins}
VERSION=${VERSION:-29012012}
EXT=${EXT:-tar.bz2}
NAMETGZ=${NAMETGZ:-mplayer-skins}
BUILD=${BUILD:-1}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets/$PKGCAT}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

MPLAYERSKINS="Abyss-1.7 AlienMind-1.2 Ater-1.2 Blue-1.8 Blue-small-1.5 \
	BlueHeart-1.5 Canary-1.2 Clearlooks-1.4 Corelian-1.1 CornerMP-1.2 \
	CornerMP-aqua-1.4 CubicPlayer-1.1 Cyrus-1.2 DVDPlayer-1.1 Dushku-1.2 \
	ICY-1.0 Industrial-1.0 JiMPlayer-1.4 KDE-0.3 Linea-1.0 MidnightLove-1.6 \
	OSX-Brushed-2.3 OSX-Mod-1.1 OpenDoh-1.1 Orange-1.3 PowerPlayer-1.1 \
	QPlayer-1.2 QuickSilver-1.0 Terminator3-1.1 WMP6-2.2 XFce4-1.0 avifile-1.6 \
	bluecurve-1.3 brushedGnome-1.0 changuito-0.2 clearplayer-0.9 \
	disappearer-1.1 divxplayer-1.3 gnome-1.1 handheld-1.0 hayraphon-1.0 \
	hwswskin-1.3 iTunes-1.1 iTunes-mini-1.1 krystal-1.1 mentalic-1.2 mini-0.1 \
	moonphase-1.0 mplayer_red-1.0 nativeRed-1.1 netscape4-1.0 \
	neutron-1.5 new-age-1.0 pcland-1.0 phony-1.1 plastik-2.0 \
	productive-1.0 proton-1.2 sessene-1.0 slim-1.2 smoothwebby-1.1 \
	softgrip-1.1 standard-1.9 trium-1.3 tvisor-1.1 	ultrafina-1.1 webby-1.3 \
	xanim-1.6 xine-lcd-1.2 xmmplayer-1.5"
WGET=${WGET:-http://www.mplayerhq.hu/MPlayer/skins/}
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Ensemble d'habillages visuels pour MPlayer"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
rm -rf ${PKG} && mkdir -p ${PKG}/usr/share/mplayer/skins

# On installe chaque habillage :
for skin in $MPLAYERSKINS; do
	
	# On télécharge les sources :
	if [ ! -r $CWD/${skin}.$EXT ]; then
		wget -vc $WGET/${skin}.$EXT -O ${skin}.$EXT.part
		mv ${skin}.$EXT{.part,}
	fi
	
	# On les vérifie :
	tar ft ${skin}.$EXT 1> /dev/null 2> /dev/null
	
	# On installe l'habillage où il faut :
	tar xf $CWD/$(basename ${skin}).$EXT -C ${PKG}/usr/share/mplayer/skins
	
done

# On vérifie les permissions de l'ensemble :
	find ${PKG}/usr/share/mplayer/skins \
		\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
		\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On assigne un habillage par défaut en créant un lien 'default' :
ln -sf productive ${PKG}/usr/share/mplayer/skins/default

# On assigne une police par défaut en liant une police du système :
ln -sf ../../../usr/share/fonts/TTF/DejaVuSans.ttf ${PKG}/usr/share/mplayer/subfont.ttf

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/usr/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

config() {
	NEW="$1"
	OLD="$(dirname $NEW)/$(basename $NEW .new)"
	
	if [ ! -r $OLD ]; then
		mv $NEW $OLD
	elif [ "$(diff -abBEiw $OLD $NEW)" = "" ]; then
		mv $NEW $OLD
	fi
}

if [ -x usr/bin/update-desktop-database ]; then
	chroot . /usr/bin/update-desktop-database &> /dev/null
fi

if [ -x /usr/bin/update-mime-database ]; then
	chroot . /usr/bin/update-mime-database /usr/share/mime >/dev/null 2>&1
fi

if [ -x usr/bin/gtk-update-icon-cache ]; then
	chroot . /usr/bin/gtk-update-icon-cache -f -t /usr/share/icons/hicolor 1>/dev/null 2>&1
fi

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true

# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spackpkg . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

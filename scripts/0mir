#!/bin/sh
#
# 0MIR - gère le serveur maître de 0linux.
#

# Copyright (c) 2012, 2013, 2014 Sébastien Boillod <sbb at tuxfamily dot org>.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

source /etc/os-release

# === Library ==================================================================

checknewpkg () {
    # Vérifie que les nouveaux paquets/dbs ont été correctement poussés.
    # $f TIMESTAMP, DBs
    local newer="" stamp="$1"; shift 1
    [ -f "$stamp" ] && newer="-newer $stamp"
    find $@ -type f $newer \! -name "*.dep" \! -name "*~" | while read pkg; do
            echo "   Contrôle  $pkg..."
            sum="$(curl -s "$URL/$pkg" | md5sum | awk '{print $1}')"
            check="$(md5sum "$pkg" | awk '{print $1}')"
            [ "$check" = "$sum" ] || growl 0 "$URL/$pkg est CORROMPU!"
    done
    date -u '+TZ=UTC0 touch -m -t %Y%m%d%H%M.%S "$0"' >"$stamp"
}

getstuff () {
    # Liste tout les fichiers utiles à la constitution de la base.
    # $f
    find * -type f -name "*.spack" -exec du -sk {} +
    find * -type f -name "*.dep"
}

growl () {
    # Imprime le message d'erreur et sort si un code non-nul est donné.
    # $f CODE, MESSAGE
    local code=$1; shift 1
    if [ $code -ne 0 ]; then
        echo "(E) $*" >&2
        exit $code
    fi
    echo "(!) $*" >&2
}

mk0db () {
    # Régénère la DB des paquets.
    # $f JOURNAL DES ERREURS
    awk -v J="$1" '(NF > 1){ s=$1; $1=$2 }
                 { p = $3 = $1; gsub(/^.*\/|\.[^.]+$/,"",$1); $2 = $1
                   sub(/-[^-]+-[^-]+-[^-]+$/,"", $1); sub(/[^\/]+$/,"", $3)
                 }
              (s){ if ($1 in DEP) {
                     print "(E) "$1" : duplication détectée!\n"\
                       "    => "p"\n    => "DEP[$1] >J
                     exit E=1
                   }
                   PATH[$1]=$3; DEP[$1] = p; DB[$2]=$0" "s; s=0; next
                 }
    (!($2 in DB)){ print "(E) "p" : sans paquet associé." >J; exit E=1 }
 (PATH[$1] != $3){ print "(E) "$1" : chemins dep/paquet contradictoires!\n"\
                         "    => "$3"\n    => "PATH[$1] >J; exit E=1 }
                 { printf("%s", DB[$2]); delete DB[$2]
                   while ((getline <p) > 0) {
                     if (! ($0 in DEP)) {
                       print "(E) "$0" : entrée sans paquet (dans "p")" >J
                       exit E=1
                     }
                     printf(" %s", $0)
                   }
                   print ""; close(p)
                 }
             END { if (!E)
                     for (p in DB)
                       print DB[p]
                 }'
}

mirror () {
    # Mets à jour le dépôt sur le serveur.
    # $f TIMESTAMP
    local user="${FTPUSER:+"-u $FTPUSER"}"
    # 'set net:limit-total-rate' : limitation de la bande passante
    # 'lftp mirror -R' : mode inversé (duplication du local vers le distant)
    # On ignore les 'include' et les sauvegardes vim en *~
    
    # Ne prend en compte que les paquets manquants :
    #lftp -v 1 -c "set net:limit-total-rate 800000,90000 && open $FTP $user && mirror -R -e --only-missing -X *~ -X include . ." || exit 1
    
    # Ne gère que les timestamps :
    #[ -f "$1" ] || TZ=UTC0 touch -t 197001010000.01 "$1"
    #lftp -c "open $FTP $user && mirror -ReN"$1" -X*~ -X*.dep . ." || exit 1
    
    ## Méthode rsync :
    find /tmp/ -mindepth 1 -maxdepth 1 -type f -name "0mir-rsync.log" -size +50M # On nettoie si le journal est trop gros
    RSYNC_PASSWORD="${CREDRSYNC}" rsync -aP --log-file=/tmp/0mir-rsync.log --delete --exclude "*~" * rsync://${LOGINRSYNC}@ftp.igh.cnrs.fr/0linuxadmin/
}

# === Main =====================================================================
export LC_ALL="C"
umask 022
FTP="ftp://ftp.igh.cnrs.fr"
URL="http://ftp.igh.cnrs.fr/pub/os/linux/0linux"
FTPUSER="appzer0"
ROOT="pub"
log="/tmp/0mir-error.log"

# On source nos données d'accès pour le login rsync :
. ./login-0mir.sh

# On génère les descriptions de chaque paquet :
cd "$(pwd)/../../../$ROOT" || exit 1
pkgroot="paquets/$VERSION"
for arch in x86_64; do # On ne fait que x86_64 pour le moment...
	echo "   Génère les descriptions dans $pkgroot/$arch/..."

	(
		cd "$pkgroot/$arch" || growl 1 "Impossible d'entrer dans \"$pkgroot/$arch\"."

		# Pour chaque catégorie :
		for categorie in $(find * -maxdepth 0 -type d | sort); do
			
			# Pour chaque paquet trouvé :
			for paquet in $(find $categorie -type f -name "*.spack" | sort); do
				
				# Si la description du paquet est absente, on nettoie et on la crée :
				if [ ! -r $(echo $paquet | sed 's@\.spack@\.txt@') ]; then
					rm -f $(dirname $paquet)/*.txt # les restes d'une autre version
					/usr/sbin/spackadd --about $paquet > $(echo $paquet | sed 's@\.spack@\.txt@')
				fi
			done
			
			# la description de chaque catégorie :
			catdesc=""
			
			# Éviter de dépasser cette règle |-------------------------------------------------------------------------------|
			[ "$categorie" = "a" ] && catdesc="a : Applications exécutables en console n'entrant dans aucune autre catégorie."
			[ "$categorie" = "b" ] && catdesc="b : Bibliothèques non rattachées à un environnement particulier."
			[ "$categorie" = "d" ] && catdesc="d : Développement. Compilateurs, débogueurs, interpréteurs, etc."
			[ "$categorie" = "e" ] && catdesc="e : Environnements. KDE, Xfce, GNOME, Enlightenment et autres environnements."
			[ "$categorie" = "g" ] && catdesc="g : applications Graphiques nécessitant X, non rattachées à un environnement."
			[ "$categorie" = "r" ] && catdesc="r : Réseau. Clients, serveurs gérant ou utilisant le réseau en console."
			[ "$categorie" = "x" ] && catdesc="x : X.org, l'implémentation libre et distribution officielle de X11"
			[ "$categorie" = "z" ] && catdesc="z : Zérolinux : paquets-abonnements, facilitant l'installation d'ensembles."
			echo "$catdesc" > ${categorie}/${categorie}.txt
		done
	)
done

rm -f "$log" # sa présence signifie qu'il y a eu erreur.

# On généère la base de données des paquets :
cd "$(pwd)/../../../$ROOT" || exit 1
for arch in x86_64; do # On ne fait que x86_64 pour le moment...
    echo "   Génère    $pkgroot/$arch/paquets.db..."
    ( cd "$pkgroot/$arch" || growl 1 "Impossible d'entrer dans \"$pkgroot/$arch\"."
      getstuff | mk0db "$log" | sort >"./paquets.db"
    )
    if [ -f "$log" ]; then
        echo "Le dépôt $arch contient des erreurs!" >&2
        cat "$log" >&2
        echo "Ce journal des erreurs est enregistré dans $log" >&2
        exit 1
    fi
done

# mirror ../.timestamp             # Méthode lftp avec timestamps uniquement
mirror                             # Méthode rsync
checknewpkg ../.timestamp $pkgroot # ajouter ici les autres dossiers à vérifier.

# EoF

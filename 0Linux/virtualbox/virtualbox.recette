#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

NAMESRC=${NAMESRC:-VirtualBox}
VERSION=${VERSION:-4.3.2}
EXT=${EXT:-tar.bz2}
NAMETGZ=${NAMETGZ:-virtualbox}
WGET=(http://download.virtualbox.org/virtualbox/$VERSION/$NAMESRC-$VERSION.$EXT
      http://download.virtualbox.org/virtualbox/$VERSION/VBoxGuestAdditions_${VERSION}.iso
      http://download.virtualbox.org/virtualbox/$VERSION/UserManual.pdf
      http://download.virtualbox.org/virtualbox/$VERSION/SDKRef.pdf
     )
DESC="Logiciel complet de virtualisation x86"

. /usr/share/0outils/fonctions_paquets.sh

# On empêche le téléchargement de la doc si on trouve les bonnes versions en
# les renommant :
if [ -r ${PKGSOURCES}/${NAMETGZ}/UserManual-${VERSION}.pdf ]; then
	mv ${PKGSOURCES}/${NAMETGZ}/UserManual{-${VERSION},}.pdf
fi
if [ -r ${PKGSOURCES}/${NAMETGZ}/SDKRef-${VERSION}.pdf ]; then
	mv ${PKGSOURCES}/${NAMETGZ}/SDKRef{-${VERSION},}.pdf
fi

telecharger_sources
preparer_sources # À partir d'ici, on se trouve dans les sources décompactées.
cflags

# On renomme les manuels avec la version :
mv ${PKGSOURCES}/${NAMETGZ}/SDKRef{,-${VERSION}}.pdf
mv ${PKGSOURCES}/${NAMETGZ}/UserManual{,-${VERSION}}.pdf

# On crée les répertoires d'accueil :
mkdir -p ${PKG}/usr/{bin,src} \
	${PKG}/usr/{include,lib${LIBDIRSUFFIX},share}/virtualbox \
	${PKG}/usr/lib${LIBDIRSUFFIX}/modules/$(uname -r)/misc \
	${PKG}/usr/share/{applications,pixmaps,mime/packages} \
	${PKG}/etc/{default,vbox}

# Un répertoire change selon l'architecture :
if [ "${PKGARCH}" = "x86_64" ]; then
	BUILDDIR="amd64"
elif [ "${PKGARCH}" = "i686" ]; then
	BUILDDIR="x86"
fi

# On supprime 'check_makeself' (qui sert à construire un installateur) :
sed -i '/[ $OSE -ge 1 ] && check_makeself/d' configure

# On empêche la suppression de modules sur la racine (!!!) :
cat $CWD/virtualbox.modules.patch | patch -p1

# On place nos préférences dans leur machin.kmk en s'inspirant lourdement de Slackware :
cat > LocalConfig.kmk << "EOF"

# On intègre correctement VBox au système :
DEFS += RTPATH_APP_PRIVATE=\"/usr/share/virtualbox\"
KBUILD_MSG_STYLE             := brief
VBOX_WITH_ORIGIN             :=
VBOX_PATH_APP_PRIVATE_ARCH   := /usr/libARCH/virtualbox
VBOX_PATH_SHARED_LIBS        := $(VBOX_PATH_APP_PRIVATE_ARCH)
VBOX_WITH_RUNPATH            := $(VBOX_PATH_APP_PRIVATE_ARCH)
VBOX_PATH_APP_PRIVATE        := /usr/share/virtualbox
VBOX_PATH_APP_DOCS           := $(VBOX_PATH_APP_PRIVATE)

# Pas de tests :
VBOX_WITH_TESTCASES          :=
VBOX_WITH_TESTSUITE          :=

# Pas de fenêtre de demande d'enregistrement :
VBOX_WITH_REGISTRATION        =

# Pour GCC >= 4.5 :
VBOX_WITH_WARNINGS_AS_ERRORS :=

# Pas de PAM :
VBOX_WITH_PAM                :=

# Chemin vers Java :
VBOX_JAVA_HOME               := /usr/libARCH/jdk

# Pas de documentation ('texlive' est nécessaire) :
VBOX_WITHOUT_DOCS            := 1

EOF

# On modifie 'LocalConfig.kmk' pour LIBDIRSUFFIX :
sed -i "s@libARCH@lib${LIBDIRSUFFIX}@g" LocalConfig.kmk

# On force à chercher dans le répertoire courant avant tout :
export PATH="${CWD}:${PATH}"

# Configuration :
fakeroot ./configure \
	--disable-docs \
	--disable-kmods \
	--disable-pulse \
	--enable-hardening \
	--enable-vde \
	--enable-vnc \
	--enable-webservice \
	--nofatal

. ./env.sh

# Compilation :
kmk -j ${JOBS} LOCALCFG=./LocalConfig.kmk || kmk LOCALCFG=./LocalConfig.kmk

# On compile maintenant 'rdesktop-vrdp' :
cd src/VBox/RDP/client

# On y copie notre configuration :
cp -a $TMP/${NAME}/LocalConfig.kmk .

# On corrige un chemin erroné :
sed -i "s@/opt/VirtualBox@/usr/share/virtualbox@" Makefile.kmk

# Compilation :
kmk-j ${JOBS} || kmk
cd -

# On compile maintenant le pack VNC :
cd src/VBox/ExtPacks/VNC
kmk -j ${JOBS} packing || kmk packing
cd -

# On compile maintenant et on installe le SDK :
export VBOX_INSTALL_PATH=/usr/lib${LIBDIRSUFFIX}/virtualbox
cd out/linux.$BUILDDIR/release/bin/sdk/installer
fakeroot python ./vboxapisetup.py install --prefix "/usr" --root ${PKG}
cd -

# On compile maintenant les modules noyau :
cd out/linux.$BUILDDIR/release/bin/src
fakeroot make KERN_DIR="/lib/modules/$(uname -r)/build"

# On place les modules noyau et on nettoie :
find . -type f -name "*.ko" -exec cp -af {} ${PKG}/lib/modules/$(uname -r)/misc/ \;
find . -type f -name "*.ko" -delete
cd -

# On crée un fichier de configuration qui n'écrasera rien :
cat > ${PKG}/etc/vbox/vbox.cfg.0nouveau << "EOF"
INSTALL_DIR="/usr/libARCH/virtualbox"
MODULE_SRC="/usr/src"

EOF

# On corrige notre config' pour notre LIBDIRSUFFIX :
sed -i "s@libARCH@lib${LIBDIRSUFFIX}@g" ${PKG}/etc/vbox/vbox.cfg.0nouveau

# On crée un fichier de paramètres par défaut :
cat > ${PKG}/etc/default/virtualbox.0nouveau << "EOF"
SHUTDOWN_USERS=""
SHUTDOWN="savestate"
VBOXWEB_USER="vboxweb"
VBOXWEB_LOGFILE="/var/log/vboxweb/vboxweb.log"

EOF

# On se place dans le répertoire résultant de la compilation :
cd out/linux.$BUILDDIR/release/bin/

# on place les sources pour les modules :
mv src $PKG/usr/src/virtualbox-$VERSION

# On place et on corrige le raccourci bureau, évidemment faux :
cp virtualbox.desktop ${PKG}/usr/share/applications/
sed -i "s@/opt/VirtualBox@/usr/share/virtualbox@" ${PKG}/usr/share/applications/virtualbox.desktop

# on place les archives de localisation :
cp -a nls ${PKG}/usr/share/virtualbox/
cp -a *.tar.bz2  ${PKG}/usr/share/virtualbox/

# on place l'icône :
cp VBox.png ${PKG}/usr/share/pixmaps/

# Et le reste (mais quel foutoir !) :
cd icons

for i in *; do
	install -d ${PKG}/usr/share/icons/hicolor/${i}/mimetypes
	cp ${i}/* $PKG/usr/share/icons/hicolor/${i}/mimetypes
done

cd -

# On place les type MIME :
cp -af virtualbox.xml ${PKG}/usr/share/mime/packages
rm -f virtualbox.xml

# On copie le SDK et les scripts :
cp -af nls sdk ${PKG}/usr/share/virtualbox/
rm -rf nls sdk
cp -af VBoxCreateUSBNode.sh VBoxSysInfo.sh ${PKG}/usr/share/virtualbox/
chmod 755 ${PKG}/usr/share/virtualbox/{VBoxSysInfo.sh,VBoxCreateUSBNode.sh}
rm -f VBoxSysInfo.sh VBoxCreateUSBNode.sh

# On place les binaires :
cp -af VBox.sh VBoxTunctl ${PKG}/usr/bin/
cp -af VBoxTunctl         ${PKG}/usr/bin/
cp -af rdesktop-vrdp      ${PKG}/usr/bin/

# On renomme sans son extension le binaire principal :
mv ${PKG}/usr/bin/VBox{.sh,}

# On crée quelquess liens symboliques :
for f in VBoxHeadless VBoxManage VBoxSDL VirtualBox vboxwebsrv VBoxBalloonCtrl; do
	ln -sf VBox ${PKG}/usr/bin/${f}
	ln -sf VBox ${PKG}/usr/bin/${f,,}
done

# On place le reste :
mv * ${PKG}/usr/lib${LIBDIRSUFFIX}/virtualbox/

cd $TMP/${NAME}

# On s'assure que ces binaires sont bien setuid :
for f in VBoxSDL VirtualBox VBoxHeadless VBoxNetDHCP VBoxNetAdpCtl VBoxNetNAT; do
	chmod 4755 ${PKG}/usr/lib${LIBDIRSUFFIX}/virtualbox/${f}
done

# On place et on modifie les services :
mkdir -p ${PKG}/var/{lib,log}/vboxweb
mkdir -p ${PKG}/etc/rc.d
cp -af src/VBox/Installer/linux/vboxweb-service.sh ${PKG}/etc/rc.d/rc.vboxweb-service
sed -i "s/%PACKAGE%/virtualbox/g"                    ${PKG}/etc/rc.d/rc.vboxweb-service
sed -i "s/%NOLSB%/yes/"                              ${PKG}/etc/rc.d/rc.vboxweb-service
sed -i "s/%DEBIAN%/no/"                              ${PKG}/etc/rc.d/rc.vboxweb-service
sed -i "s/\[ -z \"\$DEBIAN\"/#\[ -z \"\$DEBIAN\"/"   ${PKG}/etc/rc.d/rc.vboxweb-service

for i in vboxdrv.sh.in vboxballoonctrl-service.sh vboxautostart-service.sh; do
	cp -af src/VBox/Installer/linux/${i} $PKG/etc/rc.d/rc.${i}
	sed -i -e "s/%PACKAGE%/virtualbox/g" \
		-e "s/%NOLSB%/yes/" \
		-e "s/%DEBIAN%/no/" \
		-e "s/%GROUP%/vboxusers/" \
		-e "s/\[ -z \"\$DEBIAN\"/#\[ -z \"\$DEBIAN\"/" \
		${PKG}/etc/rc.d/rc.${i}
done
chmod 0755 ${PKG}/etc/rc.d/*

# On place les entêtes :
cp -arf include/* ${PKG}/usr/include/virtualbox/
rm -f ${PKG}/usr/include/virtualbox/Makefile.kmk

# On place l'image ISO des additions pour les systèmes invités :
cp -a ${PKGSOURCES}/${NAMETGZ}/VBoxGuestAdditions_${VERSION}.iso ${PKG}/usr/share/virtualbox/VBoxGuestAdditions.iso

# On place le manuel et la référence :
cp -a ${PKGSOURCES}/${NAMETGZ}/UserManual-${VERSION}.pdf ${PKG}/usr/share/virtualbox/
cp -a ${PKGSOURCES}/${NAMETGZ}/SDKRef-${VERSION}.pdf     ${PKG}/usr/share/virtualbox/

# On crée un fichier profil pour les variables d'environnement :
mkdir -p $PKG/etc/profile.d/

cat << EOF > $PKG/etc/profile.d/vbox.sh
#!/bin/sh
export VBOX_PROGRAM_PATH=/usr/lib${LIBDIRSUFFIX}/virtualbox/
export VBOX_SDK_PATH=/usr/share/virtualbox/sdk/

EOF
chmod 0755 $PKG/etc/profile.d/*

# On place des règles pour vboxdrv et l'USB :
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/udev/rules.d

cat >${PKG}/usr/lib${LIBDIRSUFFIX}/udev/rules.d/10-virtualbox.rules << "EOF"
KERNEL=="vboxdrv", NAME="vboxdrv", OWNER="root", GROUP="vboxusers", MODE="0660"
SUBSYSTEM=="usb_device", ACTION=="add", RUN+="/usr/share/virtualbox/VBoxCreateUSBNode.sh $major $minor $attr{bDeviceClass}"
SUBSYSTEM=="usb", ACTION=="add", ENV{DEVTYPE}=="usb_device", RUN+="/usr/share/virtualbox/VBoxCreateUSBNode.sh $major $minor $attr{bDeviceClass}"
SUBSYSTEM=="usb_device", ACTION=="remove", RUN+="/usr/share/virtualbox/VBoxCreateUSBNode.sh --remove $major $minor"
SUBSYSTEM=="usb", ACTION=="remove", ENV{DEVTYPE}=="usb_device", RUN+="/usr/share/virtualbox/VBoxCreateUSBNode.sh --remove $major $minor"

EOF

installer_doc
creer_post_installation

# On complète la post-installation en spécifiant les permissions :
cat >> ${PKG}/post-install.sh << "EOF"

# On spécifie les permissions spéciales : 
chgrp vboxusers usr/share/virtualbox/{VBoxCreateUSBNode.sh,VBoxSysInfo.sh}
chown vboxweb:vboxusers var/{lib,log}/vboxweb

EOF

stripper
empaqueter

# C'est fini.

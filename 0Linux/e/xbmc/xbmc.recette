#!/usr/bin/env bash
. /usr/share/0outils/fonctions_paquets.sh

VERSION=13.1
EXT=tar.gz
WGET=(http://mirrors.xbmc.org/releases/source/$NAMESRC-$VERSION.$EXT
      https://github.com/opdenkamp/xbmc-pvr-addons/archive/13.0-Gotham.$EXT
     )
DESC="Le centre multimédia XBMC et ses compléments PVR"

telecharger_sources

# On compile les « addons » PVR :
preparer_sources 13.0-Gotham.$EXT
cflags

# On lance le script 'bootstrap' permettant de générer le nécessaire à la compilation :
chmod +x bootstrap
./bootstrap

CFLAGS="${FLAGS}" CXXFLAGS="${FLAGS}" \
./configure \
	--prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX}/xbmc/addons \
	--docdir=/usr/doc/${NAMETGZ}-${VERSION} \
	--enable-addons-with-dependencies=yes \
	--build=${PKGARCH}-0linux-linux-gnu

make -j${JOBS} || make
fakeroot make install DESTDIR=${PKG}

# On nettoie :
find ${PKG} -type f -name "*.in" -delete

# On compile XBMC :
preparer_sources # À partir d'ici, on se trouve dans les sources décompactées.
cflags

# On corrige des références non-existantes :
sed -i -e 's@/usr/bin/lsb_release -d@cat /etc/os-release@' xbmc/utils/SystemInfo.cpp

# On corrige l'inclusion des entêtes Samba :
sed -i -e 's@#include <libsmbclient.h>@#include <samba-4.0/libsmbclient.h>@' xbmc/filesystem/{SmbFile,SMBDirectory}.cpp

# On évite d'avoir des délais trop long en l'absence de powerkit, merci Gentoo :
sed -i '/dbus_connection_send_with_reply_and_block/s:-1:3000:' xbmc/linux/*.cpp

# On utlise les instruction SSE2 si elles sont disponibles :
if grep 'sse2' /proc/cpuinfo 2>&1 >/dev/null; then
	sed -i 's@USE_SSE ?= 0@USE_SSE ?= 1@' lib/libsquish/config
fi

# On lance le script 'bootstrap' permettant de générer le nécessaire à la compilation :
chmod +x bootstrap
./bootstrap 

# On utilise notre Python 2 système :
export PYTHON_VERSION=2

# On permet la compilation avec un FFMPEG externe :
cat $CWD/xbmc.enable-external-ffmpeg.patch | patch -p1

# Compilation :
CFLAGS="${FLAGS}" CXXFLAGS="${FLAGS}" \
./configure \
	--prefix=/usr \
	--exec-prefix=/usr \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--mandir=/usr/man \
	--infodir=/usr/info \
	--docdir=/usr/doc/${NAMETGZ}-${VERSION} \
	--disable-debug \
	--disable-hal \
	--enable-alsa \
	--enable-avahi \
	--enable-dvdcss \
	--enable-external-ffmpeg \
	--enable-external-libraries \
	--enable-ffmpeg-libvorbis \
	--enable-gl \
	--enable-goom \
	--enable-joystick \
	--enable-libbluray \
	--enable-libusb \
	--enable-mid \
	--enable-neon \
	--enable-nfs \
	--enable-optical-drive \
	--enable-optimizations \
	--enable-rtmp \
	--enable-samba \
	--enable-sdl \
	--enable-texturepacker \
	--enable-udev \
	--enable-vaapi \
	--enable-vdpau \
	--enable-webserver \
	--enable-xrandr \
	--build=${PKGARCH}-0linux-linux-gnu

make -j${JOBS} || make
fakeroot make install DESTDIR=${PKG}

# 'lsb_release' n'existe pas sous 0Linux :
sed -i -e 's/which lsb_release &> \/dev\/null/\[ -f \/etc\/os-release ]/g' ${PKG}/usr/bin/xbmc
sed -i -e "s/lsb_release -a 2> \/dev\/null | sed -e 's\/\^\/    \/'/cat \/etc\/os-release/g" ${PKG}/usr/bin/xbmc

# On crée un fichier de démarrage pour lancer uniquement 'xbmc' en tant que « bureau » :
mkdir -p ${PKG}/etc/X11/xinit
cat > ${PKG}/etc/X11/xinit/xinitrc.xbmc << "EOF"
#!/bin/sh

userresources=$HOME/.Xresources
usermodmap=$HOME/.Xmodmap
sysresources=/etc/X11/xinit/.Xresources
sysmodmap=/etc/X11/xinit/.Xmodmap

if [ -f $sysresources ]; then
	/usr/bin/xrdb -merge $sysresources
fi

if [ -f $sysmodmap ]; then
	/usr/bin/xmodmap $sysmodmap
fi

if [ -f $userresources ]; then
	/usr/bin/xrdb -merge $userresources
fi

if [ -f $usermodmap ]; then
	/usr/bin/xmodmap $usermodmap
fi

if [ -z "$DESKTOP_SESSION" -a -x /usr/bin/ck-launch-session ]; then
	exec ck-launch-session dbus-launch --exit-with-session /usr/bin/xbmc-standalone
else
	exec dbus-launch --exit-with-session /usr/bin/xbmc-standalone
fi

EOF
chmod 755 ${PKG}/etc/X11/xinit/xinitrc.xbmc

installer_doc
creer_post_installation
stripper
empaqueter

# C'est fini.

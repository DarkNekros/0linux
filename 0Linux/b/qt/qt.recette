#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

NAMESRC=${NAMESRC:-qt-everywhere-opensource-src}
VERSION=${VERSION:-4.8.5} # recette prévue pour Qt5, "4.8.5" apparait donc partout dans la recette
EXT=${EXT:-tar.gz}
NAMETGZ=${NAMETGZ:-qt}
WGET=(http://download.qt-project.org/official_releases/qt/4.8/4.8.5/$NAMESRC-4.8.5.tar.gz)
DESC="Outils et bibliothèques de création d'applications graphiques"
# Qt5 : http://download.qt-project.org/official_releases/qt/$(echo $VERSION | cut -d'.' -f1-2)/$VERSION/single/$NAMESRC-$VERSION.$EXT

. /usr/share/0outils/fonctions_paquets.sh

telecharger_sources

# On compile Qt4 :
preparer_sources $NAMESRC-4.8.5.tar.gz
cflags

# On compile les bibliothèques 32 bits pour le multilib sous x86_64 :
if [ "${PKGARCH}" = "x86_64" ]; then
	
	# On passe en 32 bits (CFLAGS, LIBDIRSUFFIX, PKGARCH et Cie) :
	cflags i686
	
	# On corrige un problème identifié dans l'analyse des entêtes de 'boost' :
	cat $CWD/qt.boost.patch | patch -p1
	
	# On corrige un problème identifié avec CUPS depuis le bureau KDE :
	cat $CWD/qt.cups.patch | patch -p1
	
	# On corrige un problème identifié par les développeurs :
	cat $CWD/qt.bug-31579.patch | patch -p1
	
	# On corrige un problème identifié par les développeurs :
	cat $CWD/qt.bug-32534.patch | patch -p1
	
	# On corrige les chemins de X11 codés en dur :
	for fichier in $(grep -lr "X11R6" *); do
		sed -i "s@/usr/X11R6@/usr@g" ${fichier}
	done
	
	# On force les drapeaux d'optimisation :
	sed -i "s@QMAKE_CFLAGS_RELEASE	+= -O2@& ${FLAGS}@" mkspecs/common/g++.conf
	sed -i "s@-O2@& ${FLAGS}@" mkspecs/common/{g++,gcc}-base.conf
	sed -i "/^QMAKE_LFLAGS_RPATH/s| -Wl,-rpath,||g" mkspecs/common/gcc-base-unix.conf
	sed -i "/^QMAKE_LFLAGS\s/s|+=|+= ${LDFLAGS} -m32|g" mkspecs/common/gcc-base.conf
	sed -i "s|-Wl,-O1|-m32 -Wl,-O1|" mkspecs/common/g++-unix.conf
	sed -i -e "s|-O2|$CXXFLAGS -m32|" \
		-e "/^QMAKE_RPATH/s| -Wl,-rpath,||g" \
		-e "/^QMAKE_LINK\s/s|g++|g++ -m32|g" \
		-e "/^QMAKE_LFLAGS\s/s|+=|+= $LDFLAGS|g" \
		mkspecs/common/g++.conf
	
	# Compilation pour i686 :
	export QT4DIR=${TMP}/${NAME}
	export LD_LIBRARY_PATH=${QT4DIR}/lib:${LD_LIBRARY_PATH}
	
	CFLAGS="${FLAGS}" CXXFLAGS="${FLAGS}" OPENSOURCE_CXXFLAGS="${FLAGS}" \
	QMAKSPEC=linux-g++-32 \
	./configure \
		-prefix /usr \
		-confirm-license \
		-datadir /usr/share/qt \
		-docdir /usr/doc/${NAMETGZ}-4.8.5 \
		-fast \
		-importdir /usr/lib${LIBDIRSUFFIX}/qt4/imports \
		-L/usr/lib${LIBDIRSUFFIX} \
		-libdir /usr/lib${LIBDIRSUFFIX} \
		-no-phonon \
		-no-rpath \
		-no-separate-debug-info \
		-nomake demos \
		-nomake docs \
		-nomake examples \
		-nomake tools \
		-opensource \
		-optimized-qmake \
		-platform linux-g++-32 \
		-plugin-sql-sqlite \
		-plugindir /usr/lib${LIBDIRSUFFIX}/qt4/plugins \
		-reduce-relocations \
		-release \
		-translationdir /usr/share/qt/translations
	
	make -j${JOBS} || make
	fakeroot make install INSTALL_ROOT=${PKG}
	
	# On crée un fichier pour 'pkg-config' :
	mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig
	cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/Qt.pc << EOF
prefix=/usr/lib${LIBDIRSUFFIX}
bindir=\${prefix}/bin
datadir=\${prefix}/share/qt
docdir=\${prefix}/doc
headerdir=\${prefix}/include
importdir=\${prefix}/lib${LIBDIRSUFFIX}/qt4/imports
libdir=\${prefix}/lib${LIBDIRSUFFIX}
moc=\${bindir}/moc
plugindir=\${prefix}/lib${LIBDIRSUFFIX}/qt4/plugins
qmake=\${bindir}/qmake
sysconfdir=\${prefix}/etc
translationdir=\${prefix}/share/qt/translations

Name: Qt
Description: Qt Configuration
Version: ${VERSION}

EOF

	# On renomme ces fichiers spécifiques à l'archi pour les envelopper :
	mv ${PKG}/usr/bin/qmake{,-32}
	mv ${PKG}/usr/bin/uic{,-32}
	mv ${PKG}/usr/bin/uic3{,-32}
	mv ${PKG}/usr/bin/moc{,-32}
	mv ${PKG}/usr/include/Qt/qconfig{,-32}.h
	mv ${PKG}/usr/include/QtCore/qconfig{,-32}.h
	
	# On lie un 'qmake-qt4' dont certains paquets ont besoin :
	ln -sf qmake-32 ${PKG}/usr/bin/qmake-qt4-32
fi

# On refait la préparation des sources, il peut rester des déchets de la
# compilation en 32 bits (et make 'distclean' ne fonctionne pas toujours) :
preparer_sources $NAMESRC-4.8.5.tar.gz
cflags

# On corrige un problème identifié dans l'analyse des entêtes de 'boost' :
cat $CWD/qt.boost.patch | patch -p1

# On corrige un problème identifié avec CUPS depuis le bureau KDE :
cat $CWD/qt.cups.patch | patch -p1

# On corrige un problème identifié par les développeurs :
cat $CWD/qt.bug-31579.patch | patch -p1

# On corrige un problème identifié par les développeurs :
cat $CWD/qt.bug-32534.patch | patch -p1

# On corrige les chemins de X11 codés en dur :
for fichier in $(grep -lr "X11R6" *); do
	sed -i "s@/usr/X11R6@/usr@g" ${fichier}
done

# On force les drapeaux d'optimisation :
sed -i "s@QMAKE_CFLAGS_RELEASE	+= -O2@& ${FLAGS}@" mkspecs/common/g++.conf
sed -i "s@-O2@& ${FLAGS}@" mkspecs/common/{g++,gcc}-base.conf

# La machine doit être spécifiée selon l'architecture :
if [ "${PKGARCH}" = "i686" ]; then
	OPTMACHINE=32
elif [ "${PKGARCH}" = "x86_64" ]; then
	OPTMACHINE=64
fi

# Compilation :
export QT4DIR=${TMP}/${NAME}
export LD_LIBRARY_PATH=${QT4DIR}/lib:${LD_LIBRARY_PATH}

CFLAGS="${FLAGS}" CXXFLAGS="${FLAGS}" OPENSOURCE_CXXFLAGS="${FLAGS}" \
QMAKSPEC=linux-g++-${OPTMACHINE} \
./configure \
	-prefix                         /usr \
	-confirm-license \
	-datadir                        /usr/share/qt \
	-docdir                         /usr/doc/${NAMETGZ}-4.8.5 \
	-fast \
	-importdir                      /usr/lib${LIBDIRSUFFIX}/qt4/imports \
	-L/usr/lib${LIBDIRSUFFIX} \
	-libdir /usr/lib${LIBDIRSUFFIX} \
	-no-phonon \
	-no-rpath \
	-no-separate-debug-info \
	-nomake demos \
	-nomake examples \
	-opensource \
	-optimized-qmake \
	-plugin-sql-sqlite \
	-plugindir                      /usr/lib${LIBDIRSUFFIX}/qt4/plugins \
	-reduce-relocations \
	-release \
	-translationdir                 /usr/share/qt/translations

make -j${JOBS} || make
fakeroot make install INSTALL_ROOT=${PKG}

if [ "${PKGARCH}" = "x86_64" ]; then
	# On renomme ces fichiers spécifiques à l'archi pour les envelopper :
	mv ${PKG}/usr/bin/moc{,-64}
	mv ${PKG}/usr/bin/qmake{,-64}
	mv ${PKG}/usr/bin/uic{,-64}
	mv ${PKG}/usr/bin/uic3{,-64}
	mv ${PKG}/usr/include/Qt/qconfig{,-64}.h
	mv ${PKG}/usr/include/QtCore/qconfig{,-64}.h
	
	# On lie un 'qmake-qt4' dont certains paquets ont besoin :
	ln -sf qmake-64 ${PKG}/usr/bin/qmake-qt4-64

	# On lie des binaires génériques au porgramme enveloppe :
	ln -sf enveloppe_multiarch ${PKG}/usr/bin/moc
	ln -sf enveloppe_multiarch ${PKG}/usr/bin/qmake
	ln -sf enveloppe_multiarch ${PKG}/usr/bin/qmake-qt4
	ln -sf enveloppe_multiarch ${PKG}/usr/bin/uic
	ln -sf enveloppe_multiarch ${PKG}/usr/bin/uic3

	# On crée des entêtes génériques :
	cat > ${PKG}/usr/include/Qt/qconfig.h << "EOF"
#ifndef __STUB__QT4_CONFIG_H__
#define __STUB__QT4_CONFIG_H__

#if defined(__x86_64__)
#	include "qconfig-64.h"
#else
#	include "qconfig-32.h"
#endif

#endif
EOF

	cat > ${PKG}/usr/include/QtCore/qconfig.h << "EOF"
#ifndef __STUB__QT4CORE_CONFIG_H__
#define __STUB__QT4CORE_CONFIG_H__

#if defined(__x86_64__)
#	include "qconfig-64.h"
#else
#	include "qconfig-32.h"
#endif

#endif
EOF
else
	# On lie un 'qmake-qt4' dont certains paquets ont besoin :
	ln -sf qmake ${PKG}/usr/bin/qmake-qt4
fi

# On place d'abord et on redimensionne le logo de Qt :
mkdir -p ${PKG}/usr/share/icons/hicolor/{16x16,32x32,48x48,64x64,128x128}/apps
convert ${PKG}/usr/doc/${NAMETGZ}-4.8.5/src/images/qt-logo.png -resize 48x48 ${PKG}/usr/share/icons/hicolor/48x48/apps/qt-logo.png || true

# On place les autres icônes :
cp -a tools/assistant/tools/assistant/images/assistant.png ${PKG}/usr/share/icons/hicolor/32x32/apps/assistant.png
cp -a tools/assistant/tools/assistant/images/assistant-128.png ${PKG}/usr/share/icons/hicolor/128x128/apps/assistant.png
cp -a tools/designer/src/designer/images/designer.png ${PKG}/usr/share/icons/hicolor/128x128/apps/designer.png

for icone in tools/linguist/linguist/images/icons/linguist-*-32.png ; do
	taille=$(echo $(basename ${icone}) | cut -d- -f2)
	cp -a ${icone} ${PKG}/usr/share/icons/hicolor/${taille}x${taille}/apps/linguist.png
done

# On place la doc dans un répertoire à part :
installer_doc ${NAMETGZ}-4.8.5

# On fait comme Slackware, c'est propre et complet :

# On crée un fichier pour 'pkg-config' :
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/Qt.pc << EOF
prefix=/usr/lib${LIBDIRSUFFIX}
bindir=\${prefix}/bin
datadir=\${prefix}/share/qt
docdir=\${prefix}/doc
headerdir=\${prefix}/include
importdir=\${prefix}/lib${LIBDIRSUFFIX}/qt4/imports
libdir=\${prefix}/lib${LIBDIRSUFFIX}
moc=\${bindir}/moc
plugindir=\${prefix}/lib${LIBDIRSUFFIX}/qt4/plugins
qmake=\${bindir}/qmake
sysconfdir=\${prefix}/etc
translationdir=\${prefix}/share/qt/translations

Name: Qt
Description: Qt Configuration
Version: ${VERSION}

EOF

# On ajoute les raccourcis bureau :
mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/designer.desktop << EOF
[Desktop Entry]
Name=Qt4 Designer
GenericName=Interface Designer
Comment=Création d'interfaces graphiques pour applications Qt
Exec=designer
Icon=designer
MimeType=application/x-designer;
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;

EOF

cat > ${PKG}/usr/share/applications/assistant.desktop << EOF
[Desktop Entry]
Name=Qt4 Assistant 
Comment=Exemples et documentation de Qt
Exec=assistant
Icon=assistant
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;Documentation;

EOF

cat > ${PKG}/usr/share/applications/linguist.desktop << EOF
[Desktop Entry]
Name=Qt4 Linguist 
Comment=Localisation d'applications Qt
Exec=linguist
Icon=linguist
MimeType=text/vnd.trolltech.linguist;application/x-linguist;
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;

EOF

cat > ${PKG}/usr/share/applications/qtconfig.desktop << EOF
[Desktop Entry]
Name=Qt4 Config 
Comment=Configuration du conportement de Qt
Exec=qtconfig
Icon=qt-logo
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Settings;

EOF

# On crée le fichier profil pour s'assurer des variables d'environnement :
mkdir -p ${PKG}/etc/profile.d
cat > ${PKG}/etc/profile.d/qt4.sh << EOF
#!/usr/bin/env bash
# Fichier profil pour QT4.
QT4DIR=/usr/lib${LIBDIRSUFFIX}/qt4
QT_PLUGIN_PATH=/usr/lib${LIBDIRSUFFIX}/qt4/plugins

export QT4DIR QT_PLUGIN_PATH

EOF

## On compile maintenant Qt5 :
#preparer_sources # À partir d'ici, on se trouve dans les sources décompactées.
#cflags
#
# On force les drapeaux d'optimisation :
#sed -i "s@-O2@& ${FLAGS}@" qtbase/mkspecs/common/{g++,gcc}-base.conf
#
# La machine doit être spécifiée selon l'architecture :
#if [ "${PKGARCH}" = "i686" ]; then
#	OPTMACHINE=32
#elif [ "${PKGARCH}" = "x86_64" ]; then
#	OPTMACHINE=64
#fi
#
# Compilation :
#export QT5LINK=/usr
#
#CFLAGS="${FLAGS}" CXXFLAGS="${FLAGS}" OPENSOURCE_CXXFLAGS="${FLAGS}" \
#QMAKSPEC=linux-g++-${OPTMACHINE} \
#./configure \
#	-prefix                         /usr \
#	-archdatadir    /usr/lib${LIBDIRSUFFIX}/qt5 \
#	-bindir /usr/bin \
#	-confirm-license \
#	-datadir                        /usr/share/qt5 \
#	-docdir                         /usr/doc/${NAMETGZ}-${VERSION} \
#	-dbus-linked \
#	-headerdir                      /usr/include/qt5 \
#	-L/usr/lib${LIBDIRSUFFIX} \
#	-libdir /usr/lib${LIBDIRSUFFIX} \
#	-no-nis \
#	-no-separate-debug-info \
#	-nomake examples \
#	-opengl es2 \
#	-opensource \
#	-openssl-linked \
#	-optimized-qmake \
#	-plugin-sql-sqlite \
#	-release \
#	-sysconfdir                     /etc/xdg \
#	-system-harfbuzz \
#	-translationdir                 /usr/share/qt5/translations
#
#make -j${JOBS} || make
#fakeroot make install INSTALL_ROOT=${PKG}
#
# Pour Noël, je voudrais des fichiers propres pour Qt :
#sed -i "s:$PWD/qtbase:/usr/lib/qt5:g" ${PKG}/usr/lib${LIBDIRSUFFIX}/qt5/mkspecs/modules/qt_lib_bootstrap_private.pri || true
#find /usr/lib${LIBDIRSUFFIX}/lib{qgsttools_p,Qt5*}.prl -exec sed -i -r '/^QMAKE_PRL_BUILD_DIR/d;s/(QMAKE_PRL_LIBS =).*/\1/' {} \; || true
#     
## On place les icônes de Qt :
#mkdir -p ${PKG}/usr/share/icons/hicolor/{16x16,32x32,48x48,64x64,128x128}/apps
#cp -a qttools/src/assistant/assistant/images/assistant.png            ${PKG}/usr/share/icons/hicolor/32x32/apps/qt5-assistant.png || true
#cp -a qttools/src/assistant/assistant/images/assistant-128.png        ${PKG}/usr/share/icons/hicolor/128x128/apps/qt5-assistant.png || true
#cp -a qttools/src/designer/src/designer/images/designer.png           ${PKG}/usr/share/icons/hicolor/128x128/apps/qt5-designer.png || true
#
#for icone in qttools/src/linguist/linguist/images/icons/linguist-*-32.png ; do
#	taille=$(echo $(basename ${icone}) | cut -d- -f2)
#	cp -a ${icone} ${PKG}/usr/share/icons/hicolor/${taille}x${taille}/apps/linguist.png || true
#done
#
# On ajoute les raccourcis bureau pour Qt5 :
#cat > ${PKG}/usr/share/applications/qt5-designer.desktop << EOF
#[Desktop Entry]
#Name=Qt5 Designer
#GenericName=Interface Designer
#Comment=Design GUIs for Qt5 applications
#Exec=designer -qt=5
#Icon=qt5-designer
#MimeType=application/x-designer;
#Terminal=false
#Encoding=UTF-8
#Type=Application
#Categories=Qt;Development;
#
#EOF
#
#cat > ${PKG}/usr/share/applications/qt5-assistant.desktop << EOF
#[Desktop Entry]
#Name=Qt5 Assistant
#Comment=Exemples et documentation de Qt5
#Exec=assistant -qt=5
#Icon=qt5-assistant
#Terminal=false
#Encoding=UTF-8
#Type=Application
#Categories=Qt;Development;Documentation;
#
#EOF
#
#cat > ${PKG}/usr/share/applications/qt5-linguist.desktop << EOF
#[Desktop Entry]
#Name=Qt5 Linguist
#Comment=Localisation d'applications Qt5
#Exec=linguist -qt=5
#Icon=qt5-linguist
#MimeType=text/vnd.trolltech.linguist;application/x-linguist;
#Terminal=false
#Encoding=UTF-8
#Type=Application
#Categories=Qt;Development;
#
#EOF
#cat > ${PKG}/usr/share/applications/qt5-qdbusviewer.desktop << EOF
#[Desktop Entry]
#Name=Qt5 QDbusViewer 
#GenericName=D-Bus Debugger
#Comment=Debug D-Bus applications
#Exec=qdbusviewer
#Icon=qt-logo.png
#Terminal=false
#Encoding=UTF-8
#Type=Application
#Categories=Qt;Development;Debugger;
#
#EOF
#
# On crée le fichier profil pour s'assurer des variables d'environnement :
#mkdir -p ${PKG}/etc/profile.d
#cat > ${PKG}/etc/profile.d/qt5.sh << EOF
##!/usr/bin/env bash
## Fichier profil pour QT5.
#QT5DIR=/usr/lib${LIBDIRSUFFIX}/qt5
#
#export QT5DIR
#
#EOF

# Ce paquet est sale... :
rm -rf ${PKG}/usr/{demos,examples,tests}

installer_doc
creer_post_installation
stripper
empaqueter

# C'est fini.

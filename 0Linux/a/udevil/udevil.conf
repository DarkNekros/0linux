##############################################################################
#
# Fichier de configuration de 'udevil' : '/etc/udevil/udevil.conf'
#
# Ce fichier définit quels périphériques ou systèmes de fichiers locaux ou
# distants les utilisateurs ont l'autorisation de monter et démonter via
# l'usage de'udevil' (le binaire doit être suid).
# 
# IMPORTANT : IL EST POSSIBLE DE PROVOQUER DE SÉRIEUX PROBLÈMES DE SÉCURITÉ SI
# CE FICHIER EST MAL RENSEIGNÉ ; FAITES ATTENTION EN L'ÉDITANT !
#
# Note : pour un contrôle plus fin des autorisations pour des utilisateurs
# précis, y compris root, copiez ce fichier sous le nom
# '/etc/udevil/udevil-user-NOMUTILISATEUR', en remplaçant NOMUTILISATEUR
# par l'utilisateur voulu (exemple : '/etc/udevil/udevil-user-patrick.conf').
#
# Format:
#   OPTION = VALEUR[, VALEUR, ...]
#
# N'UTILISEZ PAS DE SIMPLES GUILLEMETS, sauf mention contraire.
# Les lignes débutant par un « # » sont ignorées par le programme.
#
##############################################################################


# Pour enregistrer toutes les actions, affectez un chemin à « log_file » :
# log_file = /var/log/udevil.log

# Nombre de jours approximatifs de rétention des journaux (0 = sans limite,
# le maximum est de 60):
log_keep_days = 10


# « allowed_types » définit quels systèmes de fichiers peuventêtre passés à
# 'mount'/'umount' et quels systèmes de fichiers, olocaux ou distants, peuvent
# être (dé)montés.
# Vous pouvez inclure le mot-clé « file » pour indiquer que l'utilisateur
# est autorisé à monter un fichier spécifique (comme un fichier ISO). 
# La variable $KNOWN_FILESYSTEMS sert à inclure un ensemble prédéfini de
# systèmes de fichiers autorisés comme ceux listés dans '/etc/filesystems' et
# '/proc/filesystems'.
# « allowed_types_NOMUTILISATEUR », s'il est présent, sert à ignorer
# « allowed_types » pour l'utilisateur spécifique « NOMUTILISATEUR »'. Par
# exemple, pour ne permettre à patrick que de monter les systèmes de fichiers
# de type vfat (FAT16, FAT32, etc.), ajoutez :
# allowed_types_patrick = vfat
# Attention, définir « allowed_types = * » n'inclut PAS tous les systèmes de
# fichiers pour des raisons de sécurité évidente, mais uniquement ceux connus
# du système. 
# Exemple :
# allowed_types = $KNOWN_FILESYSTEMS, file, cifs, smbfs, nfs, curlftpfs, ftpfs, sshfs, davfs, tmpfs, ramfs
allowed_types = $KNOWN_FILESYSTEMS, file


# « allowed_users » est une liste d'utilisateurs autorisé à (dé)monter via
# 'udevil'.
# Les caractères jokers (« * » ou « ? ») sont utilisables. Pour autoriser tous
# les utilisateurs, définissez « allowed_users = * ». Les UID peuvent aussi être
# spécifiés sous la forme « UID=1000 ».
# Exemple : allowed_users = carl, UID=1000, patri*
# Notez que l'autorisation doit se limiter aux utilisateurs appartenant au
# groupe qui détient le binaire '/usr/bin/udevil', à savoir le groupe 'plugdev'
# dans 0Linux.
# « allowed_users_TYPEFS », s'il est présent, est utilisé pour surcharger
# « allowed_users » lors du (dé)montage de certains types de systèmes de
# fichiers (par exemple nfs, ext3, file).
# Notez que lors du (dé)montage de fichiers réguliers, TYPEFS ser toujours du
# type «file », quel que soit le système de fichiers contenu dans ce fichier.
# Par exemple, pour ne permettre qu'à robert de (dé)monter du NFS, ajoutez :
# allowed_users_nfs = robert
# Le super-utilisateur root n'est PAS automatiquement autorisé à utiliser
# 'udevil' à moins qu'il soit listé ici (ses autorisations se cantonnent au
# contenu du fichier '/etc/fstab') :
allowed_users = *


# « allowed_groups » est une liste de groupes autorisés à utiliser 'udevil' pour
# (dé)monter des volumes. L'utilisateur ciblé DOIT appartenir à l'un de  ces
# groupes. Les caractères jokers ou les GID ne PEUVENT PAS être utilisés ici,
# bien qu'un simple astérisque « * »  peut servir à autoriser tous les groupes.
# Sachez que la permission à exécuter 'udevil' doit s'appliquer uniquement aux
# utilisateurs appartenant au groupe qui détient '/usr/bin/udevil', à savoir
# le groupe 'plugdev' par défaut sous 0Linux.
# « allowed_groups_TYPEFS », s'il est présent, permet de surcharger la variable
# « allowed_groups » lors du (dé)montage de systèmes de fichiers spécifiques
# (par exemple nfs, ext3, file). Pa rexemple, pour ne permettre qu'aux
# utilisateurs appartenant au groupe 'reseau' de (dé)monter des partage SMB ou
# NFS, ajoutez ces deux lignes :
# allowed_groups_smbfs = reseau
# allowed_groups_nfs = reseau
# Le super-utilisateur root n'est PAS automatiquement autorisé à utiliser
# 'udevil' à moins qu'il soit listé ici (ses autorisations se cantonnent au
# contenu du fichier '/etc/fstab') :
allowed_groups = plugdev


# « allowed_media_dirs » définit les répertoires « media » dans lesquels se
# situent les points de montages créés par les utilisateurs via 'udevil'. Le
# premier répertoire existant et ne contenant pas de caractère joker sera
# utilisé par défaut (typiquement '/media' ou '/run/media/$USER').
# La variable $USER, si elle est présente, sera remplacée par le nom de
# l'utilisateur se servant de 'udevil'. Les caractères jokers peuvent être
# utilisés partout SAUF dans le répertoire par défaut. Les barres obliques 
# « / » ne sont pas considérées comme caractères jokers.
# « allowed_media_dirs_TYPEFS », s'il est présent, permet de surcharger
# « allowed_media_dirs » pour le (dé)montage de systèmes de fichiers
# spécifiques (par exemple ext2, nfs). Par exemple, pour définir
# le répertoire '/media/reseau' comme étant utilisé par défaut uniquement pour
# les montages nfs et ftpfs, ajoutez ces deux lignes :
# allowed_media_dirs_nfs   = /media/reseau, /media, /run/media/$USER
# allowed_media_dirs_ftpfs = /media/reseau, /media, /run/media/$USER
# NOTE : si vous souhaitez que l'utilisateur ayant monté un volume soit le seul
# à pouvoir y accéder (et donc à précider au démontage), spépcifiez le
# répertoire '/run/media/$USER' comme premier répertoire par défaut.
# IMPORTANT : si un fichier est monté dans un répertoire « media », 
# l'utilisateur pourra être autorisé à démonter la périphérique-boucle attaché, 
# même en interne.
# DÉFINIR /MNT ICI EST FORTEMENT DÉCONSEILLÉ. TOUT RÉPERTOIRE « MEDIA » NE DOIT
# APPARTENIR ET N'ÊTRE ACCESSIBLE EN ÉCRITURE QU'À ROOT.
allowed_media_dirs = /media, /run/media/$USER


# « allowed_devices » définit les périphériques de type bloc accessible aux
# utilisateurs de 'udevil'. Si un périphérique manque  à cette liste, il ne
# sera pas (dé)montable via 'udevil' (uniquemant par d'autres méthodes comme le
# fichier '/etc/fstab'). Cependant, même si un périphérique est listé ici,
# d'autres critères peuvent empêcher son utilisation, comme l'accès aux
# périphériques internes par de simples utilisateurs.
# « allowed_devices_TYPEFS », s'il ets présent, permet de surcharger
# « allowed_devices » lors du (dé)montage de systèmes de fichiers spécifiques 
# (par exemple ext3, ntfs). Par exemple, pour empêcher le (dé)montage de tous
# les périphériques contenant un système de fichierss ext4 :
# allowed_devices_ext4 =
# NOTE : les caractères jokers sont utilisables à l'exception de « / », SAUF
# bien évidemment pour « allowed_devices = * » qui autorise n'importe quel
# périphérique which allows any device. 
# Le paramètre srecommandé est « allow _devices = /dev/* ».
# ATTENTION : AUORISER LES UTILISATEURS À MONTER DES PÉRIPHÉRIQUES HORS DE /dev
# PEUT PROVBOQUER DE SÉRIEUX PROBLÈMES DE SÉCURITÉ. N'AUTORISEZ PAS NON PLUS
# DE PÉRIPHÉRIQUES EXPLICITEMENT AU SEIN DE '/dev/shm'.
allowed_devices = /dev/*


# « allowed_internal_devices » force 'udevil' à traiter tout périphérique bloc
# listé ici comme amovible et autorise ainsi de simples utilisateurs à les
# (dé)monter (s'ils sont listés dans 'udevil.conf' comme autorisés).
# « allowed_internal_devices_TYPEFS », s'il est présent, permet de surcharger
# « allowed_internal_devices » pour certains systèmes de fichiers (par exemple
# ext3, ntfs). Par exemple, pour autoriser les périphériques bloc contenant un
# système de fichiers vfat même s'il sont de type interne, ajoutez :
# allowed_internal_devices_vfat = /dev/sdb*
# Certains disque amovibles eSATA sont vus comme des périphériques internes par
# 'udevil'. Pour pallier à ce problème, ils peuvent être traités comme
# amovibles grâce à ce paramètre.
# ATTENTION : DÉFINIR ICI UN PÉRIPHÉRIQUE SYSTÈME PEUT PROVOQUER DE SÉRIEUX
# PROBLÈMES DE SÉCURITÉ.
# allowed_internal_devices =


# « allowed_internal_uuids » et « allowed_internal_uuids_TYPEFS « fonctionnent
# de façon similaire à « allowed_internal_devices » à cei près que ce sont les
# UUID qui sont spécifiés au lieu des noms des périphériques.
# Par exemple, pour autoriser le (dé)montaget d'un système de fichiers interne
# ayant un certain UUID :
# allowed_internal_uuids = cc0c4489-8def-1e5b-a304-ab87c3cb626c0
# ATTENTION : DÉFINIR ICI UN PÉRIPHÉRIQUE SYSTÈME PEUT PROVOQUER DE SÉRIEUX
# PROBLÈMES DE SÉCURITÉ.
# allowed_internal_uuids = 


# « forbidden_devices » sert à empêcher certains périphériques d'être
# (dé)montés même s'ils figurent dans la configuration de 'udevil' (le contenu
# du fichier '/etc/fstab' n'entre pas en ligne de compte).
# « forbidden_devices_TYPEFS », s'il est présent, permet de surcharger
# « forbidden_devices » lors du (dé)montage d'un système de fichiers spécifique
# (par exemple ext3, ntfs). Par exemple, pour empêcher le (dé)montage du
# périphérique '/dev/sdd1' si celui-ci contient le système d efichiers ntfs :
# forbidden_devices_ntfs = /dev/sdd1
# NOTE : les noms des périphériques pris en compte sont les noms canoniques des
# noeuds de 'udev' ; empêcher ici un lien symbolique sera donc sans effet.
forbidden_devices =


# « allowed_networks » détermine quels hôtes cibles sont (dé)montables via
# 'udevil pour le ssystèmes de fichiers g nfs, cifs, smbfs, curlftpfs, ftpfs et
# sshfs. Les hôtes sont désignables via leur nom d'hôte (mon-serveur.fr) ou son
# adresse IP (192.168.1.100).
# Les caractères jokers sont utilisables pour les nom d'hôtes ainsi que les
# adresses IP, mais la notation CIDR (192.168.1.0/16) n'est PAS prise en
# charge. Les IP v6 sont prises en charge. Par exemple :
# allowed_networks = 127.0.0.1, 192.168.1.*, 10.0.0.*, localmachine, *.ouais.fr
# Pour empêcher tout montage distant, ajoutez :
# allowed_networks =
# « allowed_networks_TYPEFS », s'il est présent, permet de surcharger
# « allowed_networks » lord du (dé)montage de certains systèmees de fichiers
# (par exemple nfs, cifs, sshfs, curlftpfs). Par exemple, pour limiter les
# montages Samba et NFS aux réseaux locaux, ajoutez ces deux lignes :
# allowed_networks_nfs = 192.168.1.*, 10.0.0.*
# allowed_networks_cifs = 192.168.1.*, 10.0.0.*
allowed_networks = *


# « forbidden_networks » et « forbidden_networks_TYPEFS » définissent les
# réseaux non autorisées, même s'il figurent ailleurs dans la configuration de
# 'udevil.conf'.
# AUCUNE RÉTRO-INTERROGATION OU « REVERSE LOOKUP » N'EST EFFECTUÉE : toute URL
# farfelue comme « nimportequoi.truc » n'aura d'effet que si l'utilisateur
# se sert effectivement de ce nom d'hôte (par exemple au sein de '/etc/hosts').
# L'interrogation des IP est toujours effectuée ; l'interdiction sera donc
# appliquée aux nom d'hôtes correspondants.
forbidden_networks = 


# « allowed_files » détermine quels fichiers sont autorisés au (dé)montage.
# L'utilisateur doit avoir les permissions  suffisantes pour monter ces
# fichiers .
# NOTE : les caractères jokers sont utilisables, hors barre oblique « / », sauf
# pour « allowed_files = * » qui autorise n'importe quel fichier. Par exemple,
# pour n'autoriser que le montage des fichiers se trouvant sous '/share':
# allowed_files = /share/*
# NOTE : spécifier un paramètre « allowed_files_FSTYPE » n'aura aucun effet
# puisque le système de fichiers d'un fichier est toujours 'file'.
allowed_files = *


# « forbidden_files » sert à interdire au (dé)montage des fichiers spécifiques,
# même s'il figurent dans la configuration de 'udevil' ('/etc/fstab n'entre pas
# en ligne de compte). Spécifiez un chemin complet contenant la racine.
# NOTE : les caractères jokers sont utilisables, hors barre oblique « / », sauf
# pour « firbidden_files = * » qui interdit n'importe quel fichier.
# NOTE : les chemins des fichiers sont évalués au préalable par le programme ;
# interdire un lien symbolique n'aura donc aucun effet.
forbidden_files = 


# « default_options » définit les options par défaut de chaque système de
# fichiers lors du montage, en plus des options définies par l'utilisateur au
# moment du montage.
# NOTE : si un périphérique est présent au sein du fichier '/etc/fstab' et que
# l'utilisateur ne spécifie aucun point de montage, le périphérique sera monté
# avec les permissions spécifiés dans 'fstab' uniquement.
# « default_options_TYPEFS », s'il ets présent, permet de surcharger 
# « default_options » lors du montage de certains types de fichiers.
# Les variables $USER, $UID et $GID seront remplacées respectivement par le nom
# d'utilisateur, l'UID et le GID.
# POUR UN SÉCURISATION OPTIMALE, « default_options » DEVRAIT TOUJOURS INCLURE
# LES OPTIONS : nosuid, noexec, nodev.
# ATTENTION : LES OPTIONS OU LEUR ABSENCE PEUVENT INDUIRE DES PROBLÈMES DE
# SÉCURITÉ, VÉRIFIEZ-LES.
default_options           = nosuid, noexec, nodev, noatime
default_options_file      = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID, ro
# On monte iso9660 avec 'ro' pour éviter l'avertissement du montage en lecture seule.
default_options_iso9660   = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID, ro, utf8
default_options_udf       = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID
default_options_vfat      = nosuid, noexec, nodev, noatime, fmask=0022, dmask=0022, uid=$UID, gid=$GID, utf8
default_options_msdos     = nosuid, noexec, nodev, noatime, fmask=0022, dmask=0022, uid=$UID, gid=$GID
default_options_umsdos    = nosuid, noexec, nodev, noatime, fmask=0022, dmask=0022, uid=$UID, gid=$GID
default_options_ntfs      = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID, utf8
default_options_cifs      = nosuid, noexec, nodev, uid=$UID, gid=$GID
default_options_smbfs     = nosuid, noexec, nodev, uid=$UID, gid=$GID
default_options_sshfs     = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID, nonempty, allow_other
default_options_curlftpfs = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID, nonempty, allow_other
default_options_ftpfs     = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID
default_options_davfs     = nosuid, noexec, nodev, uid=$UID, gid=$GID
default_options_tmpfs     = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID
default_options_ramfs     = nosuid, noexec, nodev, noatime, uid=$UID, gid=$GID


# « allowed_options » détermine quelles options un utilisateur peut spécifier
# lors du montage.
# Toutes les options spécfiées plus haut dans ce fichier doivent figurer ici ou
# elles seront rejetées par le programme. Les caractères-jokers sont
# utilisables.
# « allowed_options_TYPEFS », s'il ets présent, permet de surcharger
# « allowed_options » pour le montage de certains systèmes de fichiers.
# Les variables $USER, $UID, et $GID seront remplacées respectivement par le nom
# d'utilisateur, l'UID et le GID.
# Vous pouvez empêcher les remontages en supprimant ici l-option « remount ».
# ATTENTION: LES OPTIONS PEUVENT INDUIRE DE SÉRIEUX PROBLÈMES DE SÉCURITÉ, 
# VÉRIFIEZ-LES.
allowed_options           = nosuid, noexec, nodev, noatime, fmask=0022, dmask=0022, uid=$UID, gid=$GID, ro, rw, sync, flush, iocharset=*, utf8, remount
allowed_options_nfs       = nosuid, noexec, nodev, noatime, ro, rw, sync, remount, port=*, rsize=*, wsize=*, hard, proto=*, timeo=*, retrans=*
allowed_options_cifs      = nosuid, noexec, nodev, ro, rw, remount, port=*, user=*, username=*, pass=*, password=*, guest, domain=*, uid=$UID, gid=$GID, credentials=*
allowed_options_smbfs     = nosuid, noexec, nodev, ro, rw, remount, port=*, user=*, username=*, pass=*, password=*, guest, domain=*, uid=$UID, gid=$GID, credentials=*
allowed_options_sshfs     = nosuid, noexec, nodev, noatime, ro, rw, uid=$UID, gid=$GID, nonempty, allow_other, idmap=user, BatchMode=yes, port=*
allowed_options_curlftpfs = nosuid, noexec, nodev, noatime, ro, rw, uid=$UID, gid=$GID, nonempty, allow_other, user=*
allowed_options_ftpfs     = nosuid, noexec, nodev, noatime, ro, rw, port=*, user=*, pass=*, ip=*, root=*, uid=$UID, gid=$GID


# « mount_point_mode » permet de spécifier un mode de création affectant
# les permissions des points de montage, différent de celui du système par
# défaut. Le mode spécifié ici soit être en mode octal et commencer par un zéro
# (par exemple : 0755).
# « mount_point_mode_TYPEFS », s'il est prsent, permet de surcharger
# « mount_point_mode » lors du montage d ecertains systèmes de fichier.
# NE SPÉCIFIER AUCUN MODE PEUT INDUIRE DES PROBLÈMES DE SÉCURITÉ POUR CERTAINS
# SYSTÈMES DE FICHIERS.
mount_point_mode = 0755
# On évite le mode de création pour certains FS :
mount_point_mode_sshfs =
mount_point_mode_curlftpfs =
mount_point_mode_ftpfs =


# Les paramètres ci-dessous servent à modifier les emplacements de programmes
# utilisés par 'udevil' ou bien pour diriger ces commandes vers des scripts.
# Lors de la substition par des scripts, assurez-vous qu'ils appartiennent à
# root et qu'ils acceptent les argument utilisés par 'udevil' : par exemple, 
# le programme pour « mount_PROGRAM » doit accepter --fake, -o, -v ou toute
# autre argument valide accepté pr 'mount'.
# Spécifiez une chemin complet depuis la racine et n'ajoutez PAS D'ARGUMENT ou 
# d'option quelconque.
# Ces programmes peuvent également être spécifiés lors de la compilation de 
# 'udevil'
# CES PROGRAMMES SERONT EXÉCUTÉS PAR ROOT.
# mount_program   = /bin/mount
# umount_program  = /bin/umount
# losetup_program = /sbin/losetup
# setfacl_program = /usr/bin/setfacl


# « validate_exec » spécifie un programme ou un script additionnel afin de 
# valider une commande de (dé)montage, au-delà de svérifications faites par
# 'udevil'. Ce programme est exécuté par un simple utilisateur (si root exécute
# 'udevil', « validate_exec» ne fonctionnera PAS). Ce programme n'est PAS
# exécuté si l'utilisateur monte un périphérique sans le sprivilèges de root 
# (par exemple via le fichier '/etc/fstab').
# Ce programme se voit transmettre trois aguments : le nom d'utilisateur, une
# description des opérations effectuées puis la ligne de commande complète de
# 'udevil'.
# Le programme doit alors retourner une valeur 0pour permettre le (dé)montage.
# Si le programme retourne une valeur autre que 0, l'utilisateur se verra
# refuser l'autorisation d'effectuer les opérations voulues.
# Par exemple, « validate_exec » peut spécifier un script de notification
# pour l'administrateur, ou bien effectuer des opérations supplémentaires pour
# authentifier l'utilisateur.
# Spécifiez un chemin complet pour le programme, sans AUCUN argument ou option.
# validate_exec =


# « validate_rootexec » fonctionne  de façon similaire à « validate_exec » à
# ceci près que le programme spécifié est exécuté en tant que root. 
# « validate_rootexec » sera aussi exécuté si 'udevil' est exécuté par root.
# Si les deux options « validate_exec » et « validate_rootexec » sont
# spécifiées, « validate_rootexec » sera exécutée en premier, suivie de
# « validate_exec ».
# Le programme doit alors retourner une valeur 0pour permettre le (dé)montage.
# Si le programme retourne une valeur autre que 0, l'utilisateur se verra
# refuser l'autorisation d'effectuer les opérations voulues.
# À moins d'être aguerri à l'écriture de scripts pour root, il est déconseillé
# d'utiliser ce type de paramètre car il peut facilement ouvrir des failles de
# sécurité.
# CE PROGRAMME SERA TOUJOURS EXÉCUTÉ PAR ROOT, MÊME SI VOUS EXÉCUTEZ 'UDEVIL'
# EN TANT QUE SIMPLE UTILISATEUR.
# validate_rootexec =


# « success_exec » est exécuté après un montage, un démontage ou un rmeontage
# réussi. Le programme sera exécuté en tant qu'utilisateur (si l'utilisateur
# de 'udevil' est root, « success_exec » ne sera PAS exécuté.
# Ce programme se voit transmettre trois aguments : le nom d'utilisateur, une
# description des opérations effectuées puis la ligne de commande complète de
# 'udevil'.
# Cependant, le code de retour du programme sera ignoré.
# Par exemple, « validate_exec » peut spécifier un script de notification
# pour l'administrateur, ou bien effectuer des opérations supplémentaires.
# Spécifiez un chemin complet pour le programme, sans AUCUN argument ou option.
# success_exec =


# « success_rootexec » fonctionne  de façon similaire à « success_exec » à
# ceci près que le programme spécifié est exécuté en tant que root. 
# « success_rootexec » sera aussi exécuté si 'udevil' est exécuté par root.
# Si les deux options « success_exec » et « success_rootexec » sont spécifiées,
# « success_rootexec » sera exécutée en premier, suivie de « success_exec ».
# À moins d'être aguerri à l'écriture de scripts pour root, il est déconseillé
# d'utiliser ce type de paramètre car il peut facilement ouvrir des failles de
# sécurité.
# CE PROGRAMME SERA TOUJOURS EXÉCUTÉ PAR ROOT, MÊME SI VOUS EXÉCUTEZ 'UDEVIL'
# EN TANT QUE SIMPLE UTILISATEUR.
# success_rootexec =


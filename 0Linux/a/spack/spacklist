#!/bin/sh
#
# SPACKLIST - display info about installed packages.
#

# Copyright (c) 2007-2011, 2013 Sébastien Boillod <sbb at tuxfamily dot org>.
# Modifié/traduit pour 0Linux an mai 2014 par appzer0 <appzer0@0linux.org>.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# === Library ==================================================================
growl () {
    # Print error message on stderr and exit if a non-null code is given.
    # $f CODE, MESSAGE
    local code=$1; shift 1
    if [ $code -ne 0 ]; then
        echo "(E) $*" >&2
        exit $code
    fi
    echo "(W) $*" >&2
}

logdisplay () {
    # Display the requested package log(s).
    # $f PATTERN(S), QUIET, VERBOSE, VERY VERBOSE
    local re="$1" pr="$2" vrb="$3" all="$4"
    [ "$re" ] && re="$(recompile "$re")"
    ls -1 | awk 'BEGIN{EXIT = 1}
                '"$re"'{ EXIT = 0
                '$vrb'   while((getline l < $0) > 0) {
                '$all'     if (l ~ /^LISTE DES FICHIERS/) break
                '$pr'      print '$vrb'l
                '$vrb'   }; close($0)
                       }
                 END{exit (EXIT && NR) ? 2 : EXIT}'
}

postdisplay () {
    # Display the requested post-install script(s).
    # $f PATTERN(S), QUIET, VERBOSE, VERY VERBOSE
    local re="$1" pr="$2" vrb="$3" all="$4"
    [ "$re" ] && re="$(recompile "$1")"
    ls -1 | awk 'BEGIN{EXIT = 1;hr=sprintf("%72s","");gsub(/./,"-",hr)}
                '"$re"'{ EXIT = 0
                '$vrb' print hr"\n> "$0"\n"hr;p=$0
                '$vrb'   while((getline < p) > 0) {
                '$all'     if (! /^\( cd [^;]+; ln -sf [^ ]+ [^ ]+ ) *$/)
                '$all'            continue; $0="/"$3"/"$8" -> "$7
                '$pr'      print
                '$vrb'   };close(p)
                       }
                END{exit (EXIT && NR) ? 2 : EXIT}'
}

recompile () {
    # Concatenate pattern as a single regular expression.
    # $f PATTERNS
    awk 'BEGIN{ re=""; c = split("'"$1"'", pat)
                for (i=1; i <= c; i++){
                    gsub(/[+.\/|)(]/, "\\\\&", pat[i]) # prevent from insane/weird requests
                    add=gsub(/[?*]/, ".&", pat[i]) ? pat[i] : pat[i]"-[^-]+-[^-]+-[^-]+"
                    re= re "|" add
                }
                print "/^(" substr(re, 2) ")$/"; exit
         }'
}

usage () {
    # Print the help digest, then exit.
    # $f EXIT CODE
    [ $1 -eq 0 ] || exec 1>&2
    cat >&1 << 3NDH3LP

    Without a name, spacklist just lists the content of the packages installed
    on your system.

    With one or several names, it returns all the package log files matching
    it. A name can be specify as a base name, which will only match the exactly
    named package ("gcc" won't match "gcc-g++"), or as an UNIX "glob" pattern,
    which will match all compatible packages ("moz*" will match both
    "mozilla-firefox" and "mozilla-thunderbird"). The glob patterns can contain
    the classic syntax ("*" and "?") plus the character classes (e. g. "[abc]",
    "[0-9]").
    
    spacklist will exit with a code 0 if something is found, 1 if an error
    occurs and 2 if nothing matched.

    Usage: spacklist [NAMES] [-h|-p|-q|-v|-V].

    Options:

        --directory=<dir>   ---     use <dir> instead of the usual directory.
        -h, --help          ---     print this help on the standard output.
        -p, --post-install  ---     look for the post-install scripts instead
                                    of the package logs.
        -q, quiet           ---     be quiet and don't return anything but an
                                    exit code.
        -v, --verbose       ---     display the head (characteristics and 
                                    description of the package) of each matched
                                    log file or the symlinks generated by the
                                    matched scripts.
        -V, --very-verbose  ---     display the whole content of each matched
                                    files.

    Bug reports, suggestions, feedbacks, questions, and so on are welcome here
    (the license is at the head of the script): <sbb at tuxfamily dot org>.

3NDH3LP
    exit $1
}


# === Main =====================================================================

# Initialization...
export LC_ALL="C" # avoid locale-related issues.
unset pkg arg print dir
LOGDIR="/var/log/packages"
POSTDIR="/var/log/scripts"
post=0
verbose="#"
all="#"

for arg in "$@"; do
    case "$arg" in
        --directory=?*) dir="$(echo "$arg" | cut -f 2- -d "=")" ;;
        -p|--post-install) post=1;;
        -q|--quiet) print="#" ;;
        -v|--verbose) unset verbose all quiet ;;
        -V|--very-verbose) unset verbose quiet; all="#" ;;
        -h|--help) usage 0 ;;
        -*) usage 1 ;;
        *) pkg="$pkg $arg"
    esac
done

if [ $post -eq 0 ]; then
    [ "$dir" ] || dir="$LOGDIR"
    display="logdisplay"
else
    [ "$dir" ] || dir="$POSTDIR"
    display="postdisplay"
fi

cd "$dir" 2>/dev/null || growl 1 "Can't enter the '$dir' directory."
$display "$pkg" "$print" "$verbose" "$all"

# EoF

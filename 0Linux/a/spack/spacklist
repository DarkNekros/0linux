#!/bin/sh
#
# SPACKLIST - display info about installed packages.
#

# Copyright (c) 2007-2011, 2013 Sébastien Boillod <sbb at tuxfamily dot org>.
# Modifié/traduit pour 0Linux an mai 2014 par appzer0 <appzer0@0linux.org>.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# === Library ==================================================================
growl () {
    # Print error message on stderr and exit if a non-null code is given.
    # $f CODE, MESSAGE
    local code=$1; shift 1
    if [ $code -ne 0 ]; then
        echo "(E) $*" >&2
        exit $code
    fi
    echo "(W) $*" >&2
}

logdisplay () {
    # Display the requested package log(s).
    # $f PATTERN(S), QUIET, VERBOSE, VERY VERBOSE
    local re="$1" pr="$2" vrb="$3" all="$4"
    [ "$re" ] && re="$(recompile "$re")"
    ls -1 | awk 'BEGIN{EXIT = 1}
                '"$re"'{ EXIT = 0
                '$vrb'   while((getline l < $0) > 0) {
                '$all'     if (l ~ /^LISTE DES FICHIERS/) break
                '$pr'      print '$vrb'l
                '$vrb'   }; close($0)
                       }
                 END{exit (EXIT && NR) ? 2 : EXIT}'
}

postdisplay () {
    # Display the requested post-install script(s).
    # $f PATTERN(S), QUIET, VERBOSE, VERY VERBOSE
    local re="$1" pr="$2" vrb="$3" all="$4"
    [ "$re" ] && re="$(recompile "$1")"
    ls -1 | awk 'BEGIN{EXIT = 1;hr=sprintf("%72s","");gsub(/./,"-",hr)}
                '"$re"'{ EXIT = 0
                '$vrb' print hr"\n> "$0"\n"hr;p=$0
                '$vrb'   while((getline < p) > 0) {
                '$all'     if (! /^\( cd [^;]+; ln -sf [^ ]+ [^ ]+ ) *$/)
                '$all'            continue; $0="/"$3"/"$8" -> "$7
                '$pr'      print
                '$vrb'   };close(p)
                       }
                END{exit (EXIT && NR) ? 2 : EXIT}'
}

recompile () {
    # Concatenate pattern as a single regular expression.
    # $f PATTERNS
    awk 'BEGIN{ re=""; c = split("'"$1"'", pat)
                for (i=1; i <= c; i++){
                    gsub(/[+.\/|)(]/, "\\\\&", pat[i]) # prevent from insane/weird requests
                    add=gsub(/[?*]/, ".&", pat[i]) ? pat[i] : pat[i]"-[^-]+-[^-]+-[^-]+"
                    re= re "|" add
                }
                print "/^(" substr(re, 2) ")$/"; exit
         }'
}

usage () {
    # Print the help digest, then exit.
    # $f EXIT CODE
    [ $1 -eq 0 ] || exec 1>&2
    cat >&1 << 3NDH3LP
    
    S'il n'est suivi d'aucun nom de paquet, 'spacklist' affiche les paquets 
    installés sur le système.

    Suivi d'un ou plusieurs noms de paquets, il affiche le contenu des journaux
    des paquets spécifiés. Un nom de paquet est soit un nom court, sans version
    ni aucun autre champ, correpondant au nom exact du paquet ('gcc' ne
    correspondra pas au paquet 'gcc-g++'), soit un motif UNIX contenant
    tout caractère compatible ("moz*" correspondra à "mozilla-firefox" et à 
    "mozilla-thunderbird"). Le motif recherché peut contenir les caractères
    jokers classiques ("*" et "?") plus les classes de caractères comme "[abc]"
    ou "[0-9]".
    
    'spacklist' retourne avec un code 0 si un journal d epaquet est trouvé, 
    retourne 1 si une erreur survient et retourne 2 si aucun journal ne
    correspond aux paquets demandés.

    Utilisation : spacklist [NOMS DE PAQUETS] [-h|-p|-q|-v|-V].

    Options :

        --directory=<dir>   ---     utilise <dir> au lieu du répertoire
                                    standard des journaux de paquets.
        -h, --help          ---     affiche cette aide sur la sortie standard.
        -p, --post-install  ---     affiche les scripts d epost-installation
                                    plutôt que les journaux des paquets.
        -q, quiet           ---     mode muet, retourne un code (0, 1 ou 2).
        -v, --verbose       ---     affiche l'entête des journaux trouvés
                                    (contient les caractéristiques des paquets,
                                     description, etc.) ou bien les liens créés
                                    par les scripts de post-installation.
        -V, --very-verbose  ---     affiche l'intégralité de chaque journal.
    
    Rapports de bogues, suggestions, retours et questions sont les bienvenus
    (la licence figure en tête de script) à : <sbb CHEZ tuxfamily POINT org>.

3NDH3LP
    exit $1
}


# === Main =====================================================================

# Initialization...
export LC_ALL="C" # avoid locale-related issues.
unset pkg arg print dir
LOGDIR="/var/log/packages"
POSTDIR="/var/log/scripts"
post=0
verbose="#"
all="#"

for arg in "$@"; do
    case "$arg" in
        --directory=?*) dir="$(echo "$arg" | cut -f 2- -d "=")" ;;
        -p|--post-install) post=1;;
        -q|--quiet) print="#" ;;
        -v|--verbose) unset verbose all quiet ;;
        -V|--very-verbose) unset verbose quiet; all="#" ;;
        -h|--help) usage 0 ;;
        -*) usage 1 ;;
        *) pkg="$pkg $arg"
    esac
done

if [ $post -eq 0 ]; then
    [ "$dir" ] || dir="$LOGDIR"
    display="logdisplay"
else
    [ "$dir" ] || dir="$POSTDIR"
    display="postdisplay"
fi

cd "$dir" 2>/dev/null || growl 1 "Can't enter the '$dir' directory."
$display "$pkg" "$print" "$verbose" "$all"

# EoF

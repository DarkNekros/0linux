#!/bin/sh
# Fichier de démarrage du système dans l'initramfs, juste avant le montage
# effectif de la racine système.

# On montera la racine en lecture seule par défaut, sauf si spécifié sur la ligne "boot:" :
RORW="ro"

# Aucune attente par défaut :
WAIT=0

# Pas de shell de secours par défaut :
RESCUE=0

# Si aucune racine n'a été spécifiée, c'est moche, mais on tente de sauver les meubles :
ROOTDEV="/dev/sda1"

# On spécifie un $PATH avant tout, en mettant BusyBox en premier:
PATH=/usr/bin/BusyBox/sbin:/usr/bin/BusyBox/usr/sbin:/usr/bin/BusyBox/bin:/usr/bin/BusyBox/usr/bin:/sbin:/usr/sbin:/bin:/usr/bin

# On installe les liens symboliques de BusyBox aux emplacement standards :
busybox --install -s

# '/dev' est censé être déjà monté en devtmpfs par le noyau.
# On monte les systèmes de fichiers virtuels sur notre système en lecture seule :
mount -n -t proc  proc  /proc
mount -n -t sysfs sysfs /sys
mount -n -t tmpfs tmpfs /run
mkdir -p /dev/pts
mount -n -t devpts devpts /dev/pts

# On analyse la ligne "boot:"
for ARG in $(cat /proc/cmdline); do
	case $ARG in
		0|1|2|3|4|5|6|S|s|single)
			RUNLEVEL=$ARG
		;;
		ro)
			RORW="ro"
		;;
		rw)
			RORW="rw"
		;;
		rescue|maintenance|secours)
			RESCUE=1
		;;
		root=/dev/*)
			ROOTDEV=$(echo $ARG | cut -d'=' -f2)
		;;
		root=LABEL=*)
			ROOTDEV=$(echo $ARG | cut -d'=' -f2-)
		;;
		root=UUID=*)
			ROOTDEV=$(echo $ARG | cut -d'=' -f2-)
		;;
		waitforroot=*|rootdelay=*)
			WAIT=$(echo $ARG | cut -d'=' -f2)
		;;
	esac
done

# Mode débogage :
DEBUGBOOTLINE="$(cat /proc/cmdline | grep '0linuxdebug')"

if [ ! "${DEBUGBOOTLINE}" = "" ]; then
	# Mode lent avec pause entre chaque étape :
	if [ ! "$(echo "${DEBUGBOOTLINE}" | grep '0linuxdebug lent')" = "" ]; then
		set -x
		trap "sleep 5" DEBUG
	
	# Mode de débogage normal :
	else
		set -x
	fi
fi

# On crée les noeuds des périphériques et on lance 'mdev', inclus dans BusyBox,
# pour peupler '/dev' :
mknod /dev/null c 1 3
mknod /dev/tty c 5 0
mknod /dev/console c 5 1
mknod /dev/zero c 1 5
mknod /dev/ptmx c 5 2
mknod /dev/random c 1 8
mknod /dev/urandom c 1 9
chown root:tty /dev/{console,ptmx,tty}
mdev -s

# On applique le délai spécifié sur la ligne de commande :
sleep ${WAIT}

# Si le mode maintenance a été appelé, on lance un shell :
if [ ${RESCUE} -eq 1 ];then
	echo "--- MODE MAINTENANCE ---"
	echo ""
	echo " Vous pouvez reparer votre systeme maintenant."
	echo ""
	echo "Si vous voulez continuer le demarrage normalement apres avoir effectue"
	echo "vos operations de maintenance, montez simplement votre racine (reparee)"
	echo "sous '/mnt' en lecture seule ou en lecture-ecriture et quittez ce shell"
	echo "avec 'exit' ; le systeme sera alors demarre normalement :"
	echo ""
	echo "	mount -o ro partition_racine /mnt # Ou, au choix :"
	echo "	mount -o rw partition_racine /mnt"
	echo ""
	echo " Puis tapez 'exit' quand vous avez termine."
	echo ""
	echo "--- MODE MAINTENANCE ---"
	/bin/sh
else
	
	# On déduit le périphérique de la racine selon ce qui spécifié (label, UUID):
	if [ ! "$(echo ${ROOTDEV} | grep 'LABEL=')" = "" -o ! "$(echo ${ROOTDEV} | grep -q 'UUID=')" = "" ]; then
		
		# Si 'findfs' retourne un code d'erreur, on aboie :
		if ! findfs ${ROOTDEV}; then
			echo "ERREUR FATALE : l'etiquette ou l'identifiant UUID specifie sur la ligne de"
			echo "demarrage ne correspond a aucune de vos partitions !"
			echo ""
			echo "Ligne de demarrage specifiee :"
			cat /proc/cmdline
			echo ""
			echo "Informations sur vos partitions :"
			blkid
		else
			ROOTDEV=$(findfs $ROOTDEV)
		fi
	fi
	
	# On monte la vraie racine sur le '/mnt' actuel (en RAM) :
	mount -o ${RORW} ${ROOTDEV} /mnt
fi

# Si 'init' est absent, on a un problème :
if [ ! -r /mnt/sbin/init ]; then
	echo "ERREUR FATALE : Aucun fichier '/mnt/sbin/init' n'a ete trouve sur la racine"
	echo "systeme (ou bien celle-ci n'est pas montee correctement)."
	echo "Vous pouvez arranger cela maintenant puis quitter en tapant 'exit' pour"
	echo "continuer le demarrage normalement."
	echo ""
	/bin/sh
fi

# On se déplace sur la nouvelle racine, montée sur '/mnt' :
cd /mnt

# 'switch_root' est obsolète, on va utiliser 'pivot_root', inclus dans BusyBox.
# On appelle 'pivot_root', plaçant l'ancienne racine dans un point de montage de 
# la nouvelle racine (remarquez l'absence de slash devant 'oldroot') :
pivot_root . oldroot

# On déplace les systèmes de fichiers virtuels sur la nouvelle racine :
mount -n -o move ./oldroot/sys  ./sys      
mount -n -o move ./oldroot/proc ./proc
mount -t devtmpfs none ./dev
mount -n -o move ./oldroot/dev/pts ./dev/pts          
mount -n -o move ./oldroot/run     ./run

# On 'chroot' sur la nouvelle racine et on lance 'init', on peut enfin démarrer.
exec chroot . /sbin/init </dev/console 2>/dev/console 2>&1

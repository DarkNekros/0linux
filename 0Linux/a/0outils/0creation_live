#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022

unset PLOP MNTTYPE

# On définit l'architecture visée :
PKGARCH=${PKGARCH:-$(uname -m)}

# On définit le suffixe du répertoire standard accueillant les bibliothèques :
if [ "${PKGARCH}" = "x86_64" ]; then
	LIBDIRSUFFIX="64"
else
	LIBDIRSUFFIX=""
fi

# On vérifie qu'on est bien root :
if [ ! "$(whoami)" = "root" ]; then
	echo "Erreur : seul root peut m'exécuter !"
	exit 1
fi

# On analyse la ligne de commande :
if [ "$1" != "--mini" -a "$1" != "--maxi" -o ! -d "$2" -o  "$2" = "" ]; then
	echo "$(basename $0) : "
	echo "Crée un système autonome (ou système « live ») pour média"
	echo "amovible (DVD, clé USB, etc.), contenant le noyau, un système minimal,"
	echo "l'installateur et éventuellement les paquets du système 0linux."
	echo "'$0' doit être suivie de l'option --mini, ou --maxi,"
	echo "puis de l'emplacement des paquets, contenant à sa racine le"
	echo "fichier 'paquets.db' ainsi que les sous-répertoires (a/, b/, d/, etc.)."
	echo ""
	echo "Créer une image du système autonome nu, dépourvue de paquets :"
	echo "	$(basename $0) --mini /quelque/part/paquets/"
	echo ""
	echo "Créer une image complète du système autonome (pèse très lourd, plus"
	echo "de 4.3 Go pour la version « eta » de 0Linux) :"
	echo "	$(basename $0) --maxi /quelque/part/paquets/"
	echo ""
	exit 1
fi

# La version de l'image à créer sera la date d'aujourd'hui :
LIVEVERSION="$(date +%d%m%Y)"

# On extrait les variables d'identification du système, dont $VERSION :
source ${LIVEOS}/etc/os-release

# La date en français pour l'affichage de l'accueil :
DATEFR="$(date '+%A %d %B %Y') à $(date '+%H:%M')"

SOURCES=${SOURCES:-/usr/share/0outils/installateur}
PAQUETS=${PAQUETS:-${2}}
TMP=${TMP:-/usr/local/temp}

LIVEOS=${LIVEOS:-$TMP/liveos}
MEDIAROOT=${MEDIAROOT:-$TMP/mediaroot}
ISODIR=${ISODIR:-$TMP/iso}
INITRDGZ=${INITRDGZ:-$TMP/initrd}
NOYAU=${NOYAU:-$TMP/noyau}

# On traite les erreurs éventuelles :
if [ ! -d "${PAQUETS}" ]; then
	echo "Erreur : ${PAQUETS} n'est pas un répertoire existant !"
	exit 1
fi

mkdir -p $TMP

# On crée et on vide les répertoires d'accueil :
rm -rf ${MEDIAROOT} ${LIVEOS} ${NOYAU} ${INITRDGZ}
rm -f ${ISODIR}/*.iso
mkdir -p ${LIVEOS} ${ISODIR} 
mkdir -p ${MEDIAROOT}/{boot/isolinux,0/paquets}

# On installe les paquets pour le système temporaire :
echo "Installation du système temporaire dans ${LIVEOS} : "

# base :
echo "Installation du système de base... "

# On installe un système minimal, merci à myou pour le tri :
for paq in \
busybox \
base-systeme \
tzdata \
glibc \
readline \
ncurses \
bash \
sgml-common \
zlib \
file \
gmp \
mpfr \
gcc \
sed \
bzip2 \
pkg-config \
shadow \
util-linux \
gptfdisk \
psmisc \
procps \
e2fsprogs \
coreutils \
iana-etc \
m4 \
flex \
bison \
grep \
bc \
libtool \
gdbm \
inetutils \
perl \
diffutils \
gawk \
findutils \
xz \
less \
gzip \
iproute2 \
kbd \
kmod \
libpipeline \
make \
patch \
sysklogd \
sysvinit \
tar \
texinfo \
eudev \
vim \
spack \
0outils \
curl \
dhcpcd \
initialisation-systeme \
libcap \
acl \
attr \
pcre \
glib \
net-tools \
rsync \
libidn \
openldap-client \
popt \
rtmpdump \
libssh \
cyrus-sasl \
cpio \
dbus \
openssl \
expat \
libffi \
openssh \
libelf \
berkeley-db \
iptables \
dosfstools \
jfsutils \
lvm2 \
fuse \
ntfs-3g_ntfsprogs \
squashfs \
sqlite \
parted \
reiserfsprogs \
syslinux \
xfsprogs \
linux; do
	spackadd --quiet --root=${LIVEOS} $(find ${PAQUETS} -type d -name "${paq}")/*.spack
done

# On réinstalle 'base-systeme' par sécurité (utilisateurs/groupes possiblement manquants) :
spackadd -f --quiet --root=${LIVEOS} ${PAQUETS}/base-systeme/*.spack 2>&1 &>/dev/null

# On nettoie tous les fichiers '*.0nouveau' :
for f in $(find ${LIVEOS}/etc -type f -name "*.0nouveau"); do
	mv ${f} $(dirname ${f})/$(basename ${f} .0nouveau)
done

# On copie les bibliothèques requises en dépendances pour les isoler :
echo "Nettoyage en cours... "
mkdir -p ${LIVEOS}/conserver/usr/lib${LIBDIRSUFFIX}

for libbb in \
libattr.so* \
libacl.so* \
libbz2.so* \
libcap.so* \
lib*curse*.so* \
libdb-*.so* \
libdbus-*.so* \
libexpat.so* \
libgcc_s.so* \
libgcj.so* \
libgcrypt.so* \
libglib-*.so* \
libgmp.so* \
libgnutls.so* \
libgobject-*.so* \
libgomp.so* \
libgpg-error.so* \
libgpm.so* \
libgthread-*.so* \
libidn.so* \
liblber*.so* \
libldap*.so* \
libpcap*.so* \
libpcre.so* \
libperl.so* \
libpopt.so* \
libpcre.so* \
libmpc.so* \
libmpfr.so* \
librtmp-*.so* \
libnettle*.so* \
libsasl*.so* \
libsqlite*.so* \
libssh*.so* \
libstdc++.so* \
libtasn1.so* \
libxcb.so* \
libxml2.so* \
libxtables.so* \
libz.so*; do
	find ${LIVEOS}/usr/lib${LIBDIRSUFFIX} -type f -name "${libbb}" -exec cp -a {} ${LIVEOS}/conserver/usr/lib${LIBDIRSUFFIX}/ \;
done

# On se garde également 'minivim' :
mkdir -p ${LIVEOS}/conserver/usr/bin
cp -a ${LIVEOS}/usr/bin/minivim ${LIVEOS}/conserver/usr/bin/

# On copie les modules réseau et les firmwares en lieu sûr :
cp -ar ${LIVEOS}/lib/firmware ${LIVEOS}/conserver/
cp -ar ${LIVEOS}/lib/modules ${LIVEOS}/conserver/

# On se garde l'unique manuel de '0g' :
cp ${LIVEOS}/usr/man/man8/0g.8.xz ${LIVEOS}/conserver/

# On désinstalle les gros paquets superflus, maintenant qu'on a les bibliothèques en lieu sûr :
for paq in \
berkeley-db \
cyrus-sasl \
gcc \
glib \
libssh \
openldap-client \
pcre \
perl \
popt \
rtmpdump \
sgml-common \
sqlite \
vim; do
	chroot ${LIVEOS} /usr/sbin/spackrm /var/log/paquets/${paq}
done

# On allège :
# La documentation (on peut la réintégrer s'il y a de la demande en ce sens) :
rm -rf ${LIVEOS}/usr/doc/*
rm -rf ${LIVEOS}/usr/man/*
rm -rf ${LIVEOS}/usr/info/*

# La documentation pour 'gtk-doc' :
rm -rf ${LIVEOS}/usr/share/gtk-doc/*

# Toutes les bibliothéques statiques et pour 'libtool' :
find ${LIVEOS} -type f -name "*.a" -delete
find ${LIVEOS} -type f -name "*.la" -delete

# Tous les fichiers entêtes :
rm -rf ${LIVEOS}/usr/include/*

# Toutes les sources du noyau :
rm -rf ${LIVEOS}/usr/src/*

# Tout le 32 bits du multilib sous x86_64, inutile dans un « live » :
if [ "${PKGARCH}" = "x86_64" ]; then
	find ${LIVEOS}/usr/lib -type f | xargs file 2>/dev/null | grep "32-bit" | cut -d':' -f1 | xargs rm -f {}
fi

# On ramène les bibliothèques :
cp -a ${LIVEOS}/conserver/usr/lib${LIBDIRSUFFIX}/* ${LIVEOS}/usr/lib${LIBDIRSUFFIX}/

# On ramène les binaires :
cp -a ${LIVEOS}/conserver/usr/bin/* ${LIVEOS}/usr/bin/

# On fait les liens standard pour 'minivim' et on supprime la configuration :
ln -sf minivim ${LIVEOS}/usr/bin/vim
ln -sf vim ${LIVEOS}/usr/bin/vi
rm -f ${LIVEOS}/etc/vimrc

# On ramène les modules et les firmware : 
cp -ra ${LIVEOS}/conserver/firmware ${LIVEOS}/lib/
cp -ra ${LIVEOS}/conserver/modules ${LIVEOS}/lib/

# On ramène le manuel de '0g' :
mkdir -p ${LIVEOS}/usr/man/man8
cp -a ${LIVEOS}/conserver/0g.8.xz ${LIVEOS}/usr/man/man8/

# On peut supprimer notre sauvegarde :
rm -rf ${LIVEOS}/conserver

# On crée le lien critique pour 'init' en environnement « live » :
ln -sf sbin/init ${LIVEOS}/init

# On copie nos fichiers spéciaux pour le Live :
echo -n "Copie des fichiers dans l'initrd... "
cp -a ${SOURCES}/initrd/{fstab,issue,profile} ${LIVEOS}/etc/
cp -a ${SOURCES}/initrd/rc.* ${LIVEOS}/etc/rc.d/
 
# On place la date de génération du système autonome et la version
# de la distribution dans le fichier du message d'accueil '/etc/issue' :
sed -i \
	-e "s@DATEGEN@${DATEFR}@" \
	-e "s@VERSIONDISTRIB@${VERSION}@" \
	${LIVEOS}/etc/issue

# On crée un fichier vide '.hushlogin' dans le répertoire de root pour éviter
# l'affichage du « message du jour » contenu dans '/etc/motd' :
touch ${LIVEOS}/root/.hushlogin

# On met à jour les liens des bibliothèques :
chroot ${LIVEOS} ldconfig

# On met à jour les dépendances des modules :
chroot ${LIVEOS} depmod -a $(ls -1 ${LIVEOS}/lib/modules)

# On déplace et on renomme le nouveau noyau sans sa version :
rm -f ${NOYAU}
mv ${LIVEOS}/boot/noyau-* ${NOYAU}

# On positionne le fuseau à Paris car on est franco-français et chauvin :
echo "localtime" > ${LIVEOS}/etc/hardwareclock
ln -sf ../usr/share/zoneinfo/Europe/Paris ${LIVEOS}/etc/localtime
echo "Terminé."

# Chauvin jusqu'à la locale :
echo "LANG=fr_FR.UTF-8" > ${LIVEOS}/etc/0linux/locale
echo "LC_ALL=fr_FR.UTF-8" > ${LIVEOS}/etc/0linux/locale

# Et chauvin jusqu'à la police :
echo "FONT=lat-9w-16" > ${LIVEOS}/etc/0linux/police

# On crée la configuration du réseau (DHCP par défaut) :
cat > ${LIVEOS}/etc/0linux/reseau << "EOF"
# Paramètres du réseau.
#
# Chaque section contient les paramètres suivants pour l'interface ethX:
# IP[X]="48.4.0.12"             # Si une IP précise est à demander
# SOUSRESEAU[X]="255.255.255.0" # Le masque de sous-réseau
# HOTEDHCP[X]="CC-4652-A"       # Si un nom d'hôte pour DHCP est requis
#
# « X » étant le chiffre de l'interface réseau concernée (eth0, eth1, etc.).
# Si la machine est reliée à un unique modem/routeur de type « box » reliée à
# internet, la plupart sont automatisées, rendant ce fichier inutile.

# IP de la passerelle par défaut :
PASSERELLE=

# Paramètres pour eth0 :
IP[0]=
SOUSRESEAU[0]=
HOTEDHCP[0]=

# Paramètres pour eth1 :
IP[1]=
SOUSRESEAU[1]=
HOTEDHCP[1]=

# Paramètres pour eth2 :
IP[2]=
SOUSRESEAU[2]=
HOTEDHCP[2]=

# Paramètres pour eth3 :
IP[3]=
SOUSRESEAU[3]=
HOTEDHCP[3]=

EOF

# On modifie '/etc/inittab' pour supprimer le paramètre qui empêche le vidage
# de l'écran (simplement moche sur le live) :
sed -i 's@--noclear@@g' ${LIVEOS}/etc/inittab

# On crée le lien pour 'init' que le noyau lancera dès la fin de l'amorçage :
ln -sf sbin/init ${LIVEOS}/init

# On vide le mot de passe du compte 'root' (envoyer vos plaintes pour sacrilège) :
chroot ${LIVEOS} passwd -d root

# On nettoie tous les fichiers '*.0nouveau' au cas où :
for f in $(find ${LIVEOS}/{etc,var} -type f -name "*.0nouveau" 2>/dev/null); do
	mv ${f} $(dirname ${f})/$(basename ${f} .0nouveau) 2>/dev/null || true
done

# On configure '0g' pour pointer sur le dépôt local si l'ISO contient les paquets :
if [ "${1}" = "--maxi" ]; then
	sed -i 's@^Source=.*$@Source="file://$Cache"@' ${LIVEOS}/etc/0outils/0g.conf
fi

# On crée l'initrd :
echo -n "Création de l'initrd... "
rm -f ${INITRDGZ}
cd ${LIVEOS}
find . | cpio -o -H newc | xz -v --x86 --check=crc32 --lzma2=dict=32MiB > ${INITRDGZ}
echo "Terminé."

echo "Copie du noyau, de l'initrd et des paquets éventuels... "

# On copie le noyau et l'initrd :
cp -a ${INITRDGZ} ${NOYAU} ${MEDIAROOT}/boot/

# On copie tous les fichiers de 'syslinux' et on renomme pour 'isolinux' :
echo "Copie du chargeur d'amorçage... "
mkdir -p ${MEDIAROOT}/boot/isolinux
cp -ra ${SOURCES}/syslinux/* ${MEDIAROOT}/boot/isolinux/
mv ${MEDIAROOT}/boot/isolinux/{syslinux.cfg,isolinux.cfg}

# On corrige l'encodage de 'isolinux.cfg' :
iconv -f UTF-8 -t CP850 ${MEDIAROOT}/boot/isolinux/isolinux.cfg > ${MEDIAROOT}/boot/isolinux/isolinux.cfg-cp850
mv ${MEDIAROOT}/boot/isolinux/isolinux.cfg{-cp850,}

# On copie les modules binaires de 'syslinux' :
cp -a /usr/share/syslinux/{*.c32,isolinux.bin} ${MEDIAROOT}/boot/isolinux/
chmod +x ${MEDIAROOT}/boot/isolinux/*.c32
echo "Terminé."

# On nettoie au cas où :
rm -rf ${MEDIAROOT}/0/paquets/*

# On copie les paquets selon l'option choisie :
if [ "${1}" = "--maxi" ]; then
	mkdir -p ${MEDIAROOT}/var/cache/0g/${VERSION}/${PKGARCH}
	rsync -av --progress --delete ${PAQUETS}/* ${MEDIAROOT}/var/cache/0g/${VERSION}/${PKGARCH}/
fi

# On s'assure des permissions :
chown -R root:root ${MEDIAROOT}/* 2> /dev/null || true

# Le nom de l'image ISO finale :
ISONAME=${ISONAME:-0linux-${VERSION}-${LIVEVERSION}-$(echo ${1} | sed 's@--@@')-${PKGARCH}.iso}

echo "Création de l'image finale ${ISONAME}..."

# On génère l'image ISO :
mkisofs -o ${ISODIR}/${ISONAME} \
	-A "$(echo ${ISONAME} | tr '-' ' ' | sed 's/\.iso//')" \
	-b boot/isolinux/isolinux.bin \
	-c boot/isolinux/boot.cat \
	-d \
	-J \
	-l \
	-N \
	-R \
	-V "$(echo ${ISONAME} | tr '-' ' ' | sed 's/\.iso//')" \
	-boot-load-size 4 \
	-boot-info-table \
	-hide-rr-moved \
	-no-emul-boot \
	${MEDIAROOT}

# On rend cette image amorçable même sur volume USB, grâce à 'isohybrid' :
isohybrid ${ISODIR}/${ISONAME}

echo "L'image '${ISODIR}/${ISONAME}' a été créée."
echo "Gravez-la sur un DVD ou copiez-la sur une clé/carte USB amorçable"
echo "via 'dd'."
echo ""
echo "Exemple pour une clé USB reconnue sous '/dev/sdc' :"
echo "	dd if=${ISODIR}/${ISONAME} of=/dev/sdc"
echo ""

exit 0

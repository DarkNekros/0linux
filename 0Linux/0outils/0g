#!/bin/sh
#
# 0G - gestionnaire distant pour 0linux.

# Copyright (c) 2012, 2013 Sébastien Boillod <sbb at tuxfamily dot org>.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

# === Configuration ============================================================
# Les informations sur le système et la configuration de 0g sont chargées en
# tant que script shell. On le fait ici afin que ceux-ci ne puissent redéfinir
# le corps du script; ils ne doivent comporter aucune erreur.
set -e
CONFIG="/etc/os-release"
if [ -f "$CONFIG" ]; then
    . "$CONFIG"
fi

unset Attention Expert Local Sauvegarde Source Tampon
CONFIG="/etc/0outils/0g.conf"
if [ -f "$CONFIG" ]; then
    . "$CONFIG"
fi
set +e

# === Bibliothèque =============================================================

evalpkg () {
    # Liste les paquets qui doivent être mis à jour
    # $f MODE EXPERT, PAQUETS
    local exp="#"
    [ "$1" = "oui" ] || exp=""; shift 1
    awk 'BEGIN { for (i=1;i<ARGC;i++) GET[ARGV[i]]="/"; ARGC=split("",ARGV)
                 getline; for (i=1; i <= NF; i++) SKIP[$i]
                 getline; for (i=1; i <= NF; i++) SPECIAL[$i]
                 while ((getline p) > 0) {
                    if (p == "--end--") break
                    n = p; sub(/-[^-]+-[^-]+-[^-]+$/,"",n)
                    GET[n] = p
                  }
               }
               ($1 in SKIP) {delete GET[$1]; next}
               (($1 in GET) && ($2 != GET[$1])) {
                     print (($1 in SPECIAL) ? 1 : 0)"\n"$3 $2
        '$exp'       for (i=4; i <= NF; i++)
        '$exp'           if ($i in DB) {
        '$exp'               print ($i in SPECIAL) ? 1 : 0
        '$exp'               print DB[$i]
        '$exp'               delete DB[$i]; SKIP[$i]
        '$exp'           } else if (!($i in SKIP)) {
        '$exp'               GET[$i]
        '$exp'           }
                     delete GET[$1]
        '$exp'       next
               }
        '$exp' { DB[$1] = $3 $2 }
               END{for (p in GET)
                     if (GET[p] == "/")
                       print "(!) "p": paquet introuvable !">"/dev/stderr"}' $@
}

getopt () {
    # Sépare les options des arguments sur la ligne de commande.
    # $f OPTIONS AVEC ARGUMENT
    local opt=$1; shift 1
    awk 'BEGIN{ for (i=x=1; i < ARGC; i++) {
                    s = ARGV[i]
                    if (X || ! (sub(/^-/,"",s) && (""s))) {
                        OP[j++] = i-x; x=i
                        continue
                    }
                    (s == "-") && (X=1) && s=""
                    while (o=substr(s,1,1)) {
                        if (o ~ /^['$opt']/) {
                            print (s == o) ? (o""++i) : (o i"#-*" o)
                            if (i < ARGC)
                                break
                            print "!"o # will be the last argument.
                        }
                        sub(/./,"",s); print o
                    }
                }
                exit (E = (j>0) ? 0 : 1)
              }
         END{ print "--"; for (i=0; i < j; i++) print OP[i]; exit E }' "$@"
}

growl () {
    # Imprime le message d'erreur et sort si un code non-nul est donné.
    # $f CODE, MESSAGE
    local code=$1; shift 1
    if [ $code -ne 0 ]; then
        echo "(E) $*" >&2
        exit $code
    fi
    echo "(!) $*" >&2
}

request () {
    # Réunit les informations pour évaluer les mises à jour.
    # $f DB, PAQUETS À IGNORER, PAQUETS GÉRÉS MANUELLEMENT
    local db="$1"; shift 1
    echo $1 # pas de guillemets car on veut tout sur une seule ligne.
    echo $2 #  "                     "                       "
    ls -1 "$LOGDIR" 2>/dev/null
    echo "--end--"
    $CURL "$db" || growl 1 "$db inaccessible!"
}

#spackadd () {
#    # Simule une mise à niveau avec de faux paquets. Essentiellement
#    # utile pour les debugs, À CONSERVER EN COMMENTAIRES.
#    # $f PAQUET
#    local pkg="$(basename "$1" | sed 's/-[^-]*-[^-]*-[^-]*$//')"
#    mkdir -p "$LOGDIR"
#    rm -f $(find "$LOGDIR/" | sed "/\/$pkg-[^-]*-[^-]*-[^-]*$/p" -n)
#    pkg=$(basename "$1" .spack)
#    echo  "  >  $pkg"
#    touch "$LOGDIR/$pkg"
#}

upgrade () {
    # Télécharge et met à niveau les paquets.
    # $f GARDER LES PAQUETS, DOSSIER TAMPON, MODE DÉMO, URL DU DÉPÔT
    local save="$1" tmp="${2:-"/tmp"}" demo="$3" url="$4" dwl="" code="" p=""
    read code || return 0
    tmp="$(mktemp -qd "$tmp/0g-XXXXXX")"
    [ "$tmp" ] || growl 1 "Impossible d'établir un dossier temporaire sécurisé !"
    [ "$demo" ] && demo="[démo]"
    while [ "$code" ]; do
        read dwl
        p=$(basename "$dwl.spack")
        echo "$demo Téléchargement de $p..."
        [ "$demo" ] || $CURL -o "$tmp/$p" "$url/$dwl.spack"
        if [ $code -ne 0 ]; then
            growl 0 "$p est marqué comme spécial et ne sera pas intégré."
        elif [ ! "$demo" ]; then
            spackadd "$tmp/$p"
            [ "$save" = "oui" ] || rm -f "$tmp/$p"
        fi
        read code
    done
    if [ "$save" = "oui" ]; then
        echo "$demo Les paquets téléchargés ont été conservés dans $tmp"
    elif ! rmdir "$tmp" 2>/dev/null; then
        growl 0 "$tmp n'est pas vide et ne sera donc pas détruit."
    fi
}

usage () {
    # Imprime l'aide et sort.
    # $f CODE
    [ $1 -eq 0 ] || exec 1>&2
    cat >&1 << EOF
       0g - gestion et mise à niveau distante des paquets de 0Linux

  0g télécharge et met à jour les paquets installés pour lesquels une
  nouvelle version est disponible dans le dépôt de 0Linux. Lorsque des
  arguments supplémentaires lui sont fournis, en sus de cette opération,
  0g cherche et installe les nouveaux paquets correspondant avec leurs
  éventuelles dépendances.

  Utilisation: 0g [option] [paquet(s)]

  Options:
      -A <item(s)>   ---  ajoute les items, séparées par des espaces, à la
                          liste des paquets ne devant pas être
                          automatiquement mis à jour.
      -E <chaine>    ---  active/désactive le mode expert, qui annule la
                          gestion des dépendances.
      -G <chaine>    ---  active/désactive la sauvegarde des paquets après
                          intégration au système.
      -L <item(s)>   ---  ajoute les items, séparées par des espaces, à la
                          liste des paquets ne devant pas être téléchargés.
      -S <chaine>    ---  redéfinit l'adresse du dépôt distant.
      -T <chaine>    ---  redéfinit la racine du répertoire sécurisé où
                          transiteront les paquets.
      -d             ---  passe en mode "démo", montrant ce qui sera fait,
                          sans rien modifier au système.
      -h             ---  imprime cette aide sur la sortie standard et sort.

  Pour plus d'informations, consultez "man 8 0g" et le fichier de configuration
  "$CONFIG".

EOF
    exit $1
}


# === Programme principal ======================================================
export LC_ALL=C
umask 022
unset demo f lister paquets
MASTER="ftp://ftp.igh.cnrs.fr/pub/os/linux/0linux/paquets"
LOGDIR="${ROOT:-"/"}var/log/packages"
CURL="/usr/bin/curl -LRs"

for i in $(getopt AEGLST "$@"); do
    case "$f$i" in
        A*) eval Attention=\${${i#A}}" $Attention";;
        E*) eval Expert=\${${i#E}};;
        G*) eval Sauvegarde=\${${i#G}};;
        L*) eval Local=\${${i#L}}" $Local";;
        S*) eval Source=\${${i#S}};;
        T*) eval Tampon=\${${i#T}};;
        d) demo=Y;;
        h) usage 0;;
        ?) growl 1 "$i: option inconnue.";;
        !?*) growl 1 "${i#!}: requiert un argument.";;
        --) f='/';;
        *) shift $i; paquets="$paquets $1"
    esac
done

[ "$Source" ] || Source="$MASTER"
Source="$Source/$VERSION/$(uname -m)" # VERSION vient de /etc/os-release.
db="$Source/paquets.db"
request "$db" "$Local" "$Attention" \
    | evalpkg "$Expert" $paquets \
    | upgrade "$Sauvegarde" "$Tampon" "$demo" "$Source"

# FdF

#!/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)

# On définit la catégorie du paquet :
for categ in base extra opt xfce xorg; do
if [ ! "$(echo $(dirname $CWD) | grep $categ)" = "" ]; then
PKGCAT="$categ"
fi
done


NAMESRC=${NAMESRC:-python}
VERSION=${VERSION:-2.6.5}
EXT=${EXT:-tar.bz2}
NAMETGZ=${NAMETGZ:-python}
BUILD=${BUILD:-2}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets/$PKGCAT}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-http://www.python.org/ftp/python/$VERSION/Python-$VERSION.$EXT}
WGETHTMLDOC=${WGETHTMLDOC:-http://docs.python.org/ftp/python/doc/${VERSION}/python-$VERSION-docs-html.$EXT}
WGETTEXTDOC=${WGETTEXTDOC:-http://docs.python.org/ftp/python/doc/${VERSION}/python-$VERSION-docs-text.$EXT}
DOC="LICENSE README Demo/ Doc/"
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Langage de programmation interprété orienté objet"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc ${WGET} -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On télécharge la doc au format texte :
if [ ! -r ${NAMESRC}-${VERSION}-docs-text.$EXT ]; then
	wget -vc ${WGETTEXTDOC} -O ${NAMESRC}-${VERSION}-docs-text.$EXT.part
	mv ${NAMESRC}-${VERSION}-docs-text.$EXT.part ${NAMESRC}-${VERSION}-docs-text.$EXT
fi

# On la vérifie :
tar ft ${NAMESRC}-${VERSION}-docs-text.$EXT 1> /dev/null 2> /dev/null

# On télécharge la doc au format HTML :
if [ ! -r ${NAMESRC}-${VERSION}-docs-html.$EXT ]; then
	wget -vc ${WGETHTMLDOC} -O ${NAMESRC}-${VERSION}-docs-html.$EXT.part
	mv ${NAMESRC}-${VERSION}-docs-html.$EXT.part ${NAMESRC}-${VERSION}-docs-html.$EXT
fi

# On la vérifie :
tar ft ${NAMESRC}-${VERSION}-docs-html.$EXT 1> /dev/null 2> /dev/null

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On positionne USE_ARCH :
export USE_ARCH=32

# L'emplacement de X11 est codé en dur :
sed -i "s@/usr/X11R6@/usr@g" setup.py

# On corrige un problème de compilation avec 'GDBM' :
sed -i "s/ndbm_libs = \[\]/ndbm_libs = ['gdbm', 'gdbm_compat']/" setup.py

# Compilation pour 32 bits :
SLKCFLAGS="-O2 -march=i686 -pipe"
LIBDIRSUFFIX=""
CC="gcc ${BUILD32}" CXX="g++ ${BUILD32}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH32}" \
LDFLAGS+="-lz -L/usr/lib${LIBDIRSUFFIX} -L/lib${LIBDIRSUFFIX}" \
./configure \
	--prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--mandir=/usr/man \
	--infodir=/usr/info \
	--docdir=/usr/doc/${NAMETGZ}-${VERSION} \
	--enable-shared \
	--build=${TARGET32}

make clean
make -j3 || make
fakeroot make install DESTDIR=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On copie les outils dans les modules :
cp -a Tools/* ${PKG}/usr/lib${LIBDIRSUFFIX}/python2.6/site-packages

# On renomme les binaires et l'entête 32 bits pour les envelopper :
mv ${PKG}/usr/bin/python{,-32}
mv ${PKG}/usr/bin/python2.6{,-32}
mv ${PKG}/usr/include/python2.6/pyconfig{,-32}.h

# On re-déballe et on se re-place dans les sources :
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On re-vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige Python pour le multilib :
cat $CWD/Python.multilib.patch | patch -p1

# On positionne USE_ARCH :
export USE_ARCH=64

# On active "lib64" grâce au correctif multilib :
sed -i -e "s:@@MULTILIB_DIR@@:lib64:g" Lib/distutils/command/install.py \
	Lib/distutils/sysconfig.py \
	Lib/site.py \
	Makefile.pre.in \
	Modules/Setup.dist \
	Modules/getpath.c \
	setup.py

# L'emplacement de X11 est codé en dur :
sed -i "s@/usr/X11R6@/usr@g" setup.py

# On corrige un problème de compilation avec 'GDBM' :
sed -i "s/ndbm_libs = \[\]/ndbm_libs = ['gdbm', 'gdbm_compat']/" setup.py

# Compilation pour 64 bits :
SLKCFLAGS="-O2 -fPIC -pipe"
LIBDIRSUFFIX="64"
CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH64}" \
LDFLAGS+="-lz -L/usr/lib${LIBDIRSUFFIX} -L/lib${LIBDIRSUFFIX}" \
./configure \
	--prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--mandir=/usr/man \
	--infodir=/usr/info \
	--docdir=/usr/doc/${NAMETGZ}-${VERSION} \
	--enable-shared \
	--build=${TARGET64}

make -j3 || make
fakeroot make install DESTDIR=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On renomme les binaires et l'entête 64 bits :
mv ${PKG}/usr/bin/python{,-64} &&
mv ${PKG}/usr/bin/python2.6{,-64} &&
mv ${PKG}/usr/include/python2.6/pyconfig{,-64}.h

# On copie les outils dans les modules :
cp -a Tools/* ${PKG}/usr/lib${LIBDIRSUFFIX}/python2.6/site-packages

# On lie de faux binaires au programme enveloppe :
ln -sf multiarch_wrapper ${PKG}/usr/bin/python
ln -sf multiarch_wrapper ${PKG}/usr/bin/python2.6

# On crée un faux entête pour s'adapter au multilib :
cat > ${PKG}/usr/include/python2.6/pyconfig.h << "EOF"
#ifndef __STUB__PYCONFIG_H__
#define __STUB__PYCONFIG_H__

#if defined(__x86_64__)
#	include "pyconfig-64.h"
#else
#	include "pyconfig-32.h"
#endif

#endif

EOF

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# Installation de la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/Tools
cp -a ${DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
ln -sf ../../../usr/lib/python2.6/site-packages/Tools ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/Tools-32
ln -sf ../../../usr/lib64/python2.6/site-packages/Tools ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/Tools-64
tar xf $CWD/${NAMESRC}-${VERSION}-docs-html.$EXT -C ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
tar xf $CWD/${NAMESRC}-${VERSION}-docs-text.$EXT -C ${PKG}/usr/doc/${NAMETGZ}-${VERSION}

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true




# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

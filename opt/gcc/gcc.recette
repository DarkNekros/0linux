#!/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

# L'archive de GNAT se trouve sur le serveur FTP de 0, dans 
# le répertoire 'archives_sources', à moins que  vous ne désiriez télécharger
# l'archive sur le site officiel (111 Mo à 25 ko/s maxi, bon courage).

# Positionner la variable BUILDGNAT pour télécharger/compiler GNAT avant de
# compiler GCC :
# 	BUILDGNAT=oui ./gcc.recette

set -e
umask 022
CWD=$(pwd)

NAMESRC=${NAMESRC:-gcc}
VERSION=${VERSION:-4.5.1}
ECJVERSION=${ECJVERSION:-4.5}
EXT=${EXT:-tar.bz2}
NAMETGZ=${NAMETGZ:-gcc}
BUILD=${BUILD:-2}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-http://ftp.gnu.org/gnu/$NAMESRC/$NAMESRC-$VERSION/$NAMESRC-$VERSION.$EXT}
WGET_ECJ=${WGET_ECJ:-ftp://sourceware.org/pub/java/ecj-${ECJVERSION}.jar}
WGET_GNAT=${WGET_GNAT:-http://libre2.adacore.com/ac_download/?ac_download&file=MD5%3Ab254f484866ed9a571618d26613e6a88}
GNATFILE=${GNATFILE:-gnat-gpl-2010-x86_64-pc-linux-gnu-bin.tar.gz}
PKG_DOC="COPYING* ChangeLog ChangeLog.tree-ssa INSTALL LAST_UPDATED MAINTAINERS NEWS README*"
GCC_DOC="gcc/ABOUT* gcc/ChangeLog.tree-ssa gcc/COPYING* gcc/LANGUAGES gcc/ONEWS gcc/README.Portability"
LIBJAVA_DOC="libjava/COPYING* libjava/ChangeLog libjava/HACKING libjava/LIBGCJ_LICENSE libjava/NEWS libjava/README libjava/THANKS"
LIBOBJC_DOC="libobjc/ChangeLog libobjc/README libobjc/README.threads libobjc/THREADS libobjc/THREADS.MACH"
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="La suite de compilateurs de GNU"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On télécharge l'archive Java ECJ :
if [ ! -r ecj-${ECJVERSION}.jar ]; then
	wget -vc $WGET_ECJ -O ecj-${ECJVERSION}.jar.part
	mv ecj-${ECJVERSION}.jar.part ecj-${ECJVERSION}.jar
fi

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}

# Si BUILDGNAT ets positionnée :
if [ ! "$BUILDGNAT" = "" ]; then
	# On télécharge l'archive GNAT si vraiment on ne l'a pas déjà... :
	if [ ! -r $CWD/${GNATFILE} ]; then
		wget -vc $WGET_ECJ -O ${GNATFILE}.part
		mv ${GNATFILE}{.part,}
	fi
	
	# On déballe GNAT et on se place dans les sources :
	NAMEGNAT=$(tar ft ${GNATFILE} | head -n 1 | awk -F/ '{ print $1 }')
	cd $TMP
	rm -rf ${NAMEGNAT}
	echo "Extraction en cours..."
	tar xf $CWD/${GNATFILE}
	cd ${NAMEGNAT}
	
	# On vérifie les permissions des sources :
	find . \
		\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
		\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

	# On compile et on installe dans un répertoire temporaire :
	fakeroot make ins-all prefix=$TMP/gnattmp

	# On ajoute GNAT en début de chemin du PATH :
	OLDPATH=$PATH
	export PATH=$TMP/gnattmp/bin:$OLDPATH
	
	cd -
fi

# On déballe et on se place dans les sources :
NAME=$(tar ft $CWD/${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
rm -rf ${NAMETGZ}-build
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# Copie de l'archive Java dans les sources :
cp $CWD/ecj-${ECJVERSION}.jar ecj.jar

# On se passe de 'libiberty' (présente dans 'binutils') :
sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in

# On force l'utilisation de -fomit-frame-pointer
sed -i 's/^T_CFLAGS =$/& -fomit-frame-pointer/' gcc/Makefile.in

# On se débarrasse du script fixincludes :
sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

# On corrige la détection de 'ppl' :
sed -i "/ppl_minor_version=/s#10#11#" configure

# On crée un répertoire séparé pour la compilation :
mkdir -p $TMP/${NAMETGZ}-build
cd $TMP/${NAMETGZ}-build

# Compilation :
SLKCFLAGS="-O2 -fPIC -pipe"
LIBDIRSUFFIX="64"
CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" \
$TMP/${NAME}/configure --prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--libexecdir=/usr/lib${LIBDIRSUFFIX} \
	--mandir=/usr/man \
	--infodir=/usr/info \
	--enable-shared \
	--enable-threads=posix \
	--enable-__cxa_atexit \
	--enable-libssp \
	--with-gnu-ld \
	--with-system-zlib \
	--enable-clocale=gnu \
	--enable-multilib \
	--enable-languages=ada,c,c++,fortran,java,lto,objc \
	--enable-libada \
	--enable-lto \
	--with-cloog \
	--with-ppl \
	--build=${TARGET64}

(
	cd gcc
	GNATLIBCFLAGS="$SLKCFLAGS" make -j3 gnatlib || GNATLIBCFLAGS="$SLKCFLAGS" make gnatlib
	CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" make -j3 gnattools || \
		CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" make gnattools
)

make -j3 bootstrap || make bootstrap
make info
fakeroot make install DESTDIR=${PKG}
fakeroot make -i install-info DESTDIR=${PKG}

# Ces fichiers causent des erreurs avec 'ldconfig' :
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/*gdb.py

# Cet entête a besoin d'un lien dans /usr/include pour certains paquets :
ln -sf ../../usr/lib${LIBDIRSUFFIX}/gcc/${TARGET64}/${VERSION}/include/ffitarget.h ${PKG}/usr/include

# On s'assure que le très important fichier « specs » soit présent :
if [ ! -r ${PKG}/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET64}/${VERSION}/specs ]; then
	cat gcc/specs > $PKG/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET64}/${VERSION}/specs
fi

# On corrige cette permission :
chmod 755 ${PKG}/usr/lib${LIBDIRSUFFIX}/libgcc_s.so.1

# Certains s'attendent à la présence de /lib/cpp :
mkdir -p ${PKG}/lib
ln -sf ../usr/bin/cpp ${PKG}/lib/cpp

# On crée le lien 'cc' vers 'gcc' :
ln -sf gcc ${PKG}/usr/bin/cc

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# On installe la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/gcc/{fortran,java,objc}
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/{libada,libffi,libjava,libmudflap,libgomp,libobjc,libstdc++-v3}

cp -a ${PKG_DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
cp -a ${GCC_DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/gcc
cp -a gcc/fortran/ChangeLog* ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/gcc/fortran
cp -a gcc/java/ChangeLog* ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/gcc/java
cp -a gcc/objc/{ChangeLog,README} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/gcc/objc
cp -a libada/ChangeLog ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/libada
cp -a libgfortran/ChangeLog ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/libgfortran
cp -a libffi/{ChangeLog*,LICENSE,README} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/libffi
cp -a ${LIBJAVA_DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/libjava
cp -a libmudflap/ChangeLog ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/libmudflap
cp -a libgomp/ChangeLog ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/libgomp
cp -a ${LIBOBJC_DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/libobjc
cp -a libstdc++-v3/{ChangeLog,README} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/libstdc++-v3

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true

# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
		rm -rf $TMP/${NAMETGZ}-build
	fi
	if [ ! \"$BUILDGNAT\" = \"\" ]; then
		rm -rf $TMP/${NAMEGNAT}
		export PATH=$OLDPATH
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

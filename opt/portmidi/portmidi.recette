#!/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)

NAMESRC=${NAMESRC:-portmidi}
VERSION=${VERSION:-200}
EXT=${EXT:-zip}
NAMETGZ=${NAMETGZ:-portmidi}
BUILD=${BUILD:-2}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-http://prdownloads.sourceforge.net/portmedia/$NAMESRC-src-$VERSION.$EXT}
DOC="*.txt"
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Bibliothèques pour entrées/sorties MIDI"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}/usr/share/applications
mkdir -p ${PKG}/usr/share/icons/hicolor/128x128/apps
mkdir -p ${PKG}/usr/include

# On déballe et on se place dans les sources :
NAME=portmidi
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
unzip $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On positionne USE_ARCH :
export USE_ARCH=32

# Compilation pour 32 bits :
SLKCFLAGS="-O2 -march=i686 -pipe"
LIBDIRSUFFIX=""

# On corrige ce capharnaüm avec ce correctif de Gentoo :
cat $CWD/portmidi-200-Makefile.patch | patch -p1

sed -i "#set(JAVAVM_LIB .*$#JAVAVM_LIB /usr/lib${LIBDIRSUFFIX}/libjvm.so#" pm_common/CMakeLists.txt

CC="gcc ${BUILD32}" CXX="g++ ${BUILD32}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH32}" \
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX} -L/lib${LIBDIRSUFFIX}" \
cmake . \
	-DCMAKE_C_FLAGS="$SLKCFLAGS" \
	-DCMAKE_CXX_FLAGS="$SLKCFLAGS" \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DCMAKE_CACHEFILE_DIR=${PKG} \
	-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY="$PKG/usr/lib$LIBDIRSUFFIX" \
	-DCMAKE_LIBRARY_OUTPUT_DIRECTORY="$PKG/usr/lib$LIBDIRSUFFIX" \
	-DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$PKG/usr/bin \
	-DJAVA_AWT_INCLUDE_PATH="/usr/lib$LIBDIRSUFFIX/jdk/include" \
	-DJAVA_INCLUDE_PATH="/usr/lib$LIBDIRSUFFIX/jdk/include" \
	-DJAVA_INCLUDE_PATH2="/usr/lib$LIBDIRSUFFIX/jdk/include/linux" \
	-DJAVA_JVM_LIBRARY="/usr/lib$LIBDIRSUFFIX/libjvm.so"

# On corrige les occurrences de '/usr/local' codées en dur :
find . \( -name cmake_install.cmake -o -name CMakeLists.txt -o -name Makefile \) -exec sed -i 's%/local%%g' '{}' \;

make all CFLAGS="-fPIC" PMFLAGS="-DNEWBUFFER"
fakeroot make install DESTDIR=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On re-déballe et on se re-place dans les sources :
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
unzip $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On re-vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On positionne USE_ARCH :
export USE_ARCH=64

# Compilation pour 64 bits :
SLKCFLAGS="-O2 -fPIC -pipe"
LIBDIRSUFFIX="64"

# On corrige ce capharnaüm avec ce correctif de Gentoo :
cat $CWD/portmidi-200-Makefile.patch | patch -p1

sed -i "#set(JAVAVM_LIB .*$#JAVAVM_LIB /usr/lib${LIBDIRSUFFIX}/libjvm.so#" pm_common/CMakeLists.txt

CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH64}" \
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX} -L/lib${LIBDIRSUFFIX}" \
cmake . \
	-DCMAKE_C_FLAGS="$SLKCFLAGS" \
	-DCMAKE_CXX_FLAGS="$SLKCFLAGS" \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DCMAKE_CACHEFILE_DIR=${PKG} \
	-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY="$PKG/usr/lib$LIBDIRSUFFIX" \
	-DCMAKE_LIBRARY_OUTPUT_DIRECTORY="$PKG/usr/lib$LIBDIRSUFFIX" \
	-DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$PKG/usr/bin \
	-DJAVA_AWT_INCLUDE_PATH="/usr/lib$LIBDIRSUFFIX/jdk/include" \
	-DJAVA_INCLUDE_PATH="/usr/lib$LIBDIRSUFFIX/jdk/include" \
	-DJAVA_INCLUDE_PATH2="/usr/lib$LIBDIRSUFFIX/jdk/include/linux" \
	-DJAVA_JVM_LIBRARY="/usr/lib$LIBDIRSUFFIX/libjvm.so"

# On corrige les occurrences de '/usr/local' codées en dur :
find . \( -name cmake_install.cmake -o -name CMakeLists.txt -o -name Makefile \) -exec sed -i 's%/local%%g' '{}' \;

make all CFLAGS="-fPIC" PMFLAGS="-DNEWBUFFER"
fakeroot make install DESTDIR=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On renomme ce binaire au nom beaucoup trop générique :
mv ${PKG}/usr/bin/{,portmidi}test

# On installe les entêtes  :
cp -a pm_common/{portmidi,porttime,pmutil}.h ${PKG}/usr/include

# on crée le raccourci pour 'pmdefaults' :
cat > ${PKG}/usr/share/applications/pmdefaults.desktop << "EOF"
[Desktop Entry]
Comment=Spécifier les entrées/sorties par défaut pour Portmidi
Exec=pmdefaults
GenericName=Paramètres PortMidi
Icon=/usr/share/icons/hicolor/128x128/apps/pmdefaults-icon.png
Name=PM Defaults
NoDisplay=false
StartupNotify=true
Terminal=0
TerminalOptions=
Type=Application
X-KDE-SubstituteUID=false
X-KDE-Username=

EOF

# On place l'icône :
install -m 0644 -D pm_java/pmdefaults/pmdefaults-icon.png ${PKG}/usr/share/icons/hicolor/128x128/apps/pmdefaults-icon.png

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# Installation de la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
cp -a ${DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

config() {
	NEW="$1"
	OLD="$(dirname $NEW)/$(basename $NEW .new)"
	
	if [ ! -r $OLD ]; then
		mv $NEW $OLD
	elif [ "$(diff -abBEiw $OLD $NEW)" = "" ]; then
		mv $NEW $OLD
	fi
}

if [ -x usr/bin/update-desktop-database ]; then
	chroot . /usr/bin/update-desktop-database &> /dev/null
fi

if [ -x /usr/bin/update-mime-database ]; then
  /usr/bin/update-mime-database usr/share/mime >/dev/null 2>&1
fi

if [ -x usr/bin/gtk-update-icon-cache ]; then
	chroot . /gtk-update-icon-cache -f -t /usr/share/icons/hicolor 1>/dev/null 2>&1
fi

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true

# On génère le fichier des dépendances :
. /sbin/0ldd.sh

# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

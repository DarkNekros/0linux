#!/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)

NAMESRC=${NAMESRC:-nss}
VERSION=${VERSION:-3.12.8}
EXT=${EXT:-tar.gz}
NAMETGZ=${NAMETGZ:-nss}
BUILD=${BUILD:-1}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-ftp://ftp.mozilla.org/pub/mozilla.org/security/$NAMESRC/releases/NSS_$(echo $VERSION | sed 's/\./_/g')_RTM/src/$NAMESRC-$VERSION.$EXT}
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Bibliothèques de sécurité multi-plateforme"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}/usr/{bin,include/nss3,lib{,64}/pkgconfig}

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige la prise en charge des LDFLAGS :
sed -i 's@\$(MKSHLIB) -o@\$(MKSHLIB) \$(LDFLAGS) -o@g' mozilla/security/coreconf/rules.mk

# On positionne USE_ARCH :
export USE_ARCH=32

# Compilation pour 32 bits :
# Les CFLAGS plantent la compilation.
LIBDIRSUFFIX=""
for rep in mozilla/security/{coreconf,dbm,nss}; do
	CC="gcc ${BUILD32}" CXX="g++ ${BUILD32}" \
	PKG_CONFIG_PATH="${PKG_CONFIG_PATH32}" \
	LDFLAGS="-L/usr/lib${LIBDIRSUFFIX} -L/lib${LIBDIRSUFFIX}" \
	NSPR_INCLUDE_DIR="/usr/include/nspr" \
	BUILD_OPT=1 NSS_USE_SYSTEM_SQLITE=1 FREEBL_NO_DEPEND=1 \
	make -C ${rep}
done

# On neutralise USE_ARCH :
unset USE_ARCH

# On copie les bibliothèques 32 bits :
install -m755 mozilla/dist/*.OBJ/lib/lib*3.so ${PKG}/usr/lib${LIBDIRSUFFIX}
install -m644 mozilla/dist/*.OBJ/lib/*.a ${PKG}/usr/lib${LIBDIRSUFFIX}

# On crée le fichier pour 'pkg-config' :
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/nss.pc << EOF
prefix=/usr
exec_prefix=/usr/bin
libdir=/usr/lib
includedir=/usr/include/nss3

Name: NSS
Description: Network Security Services
Version: ${VERSION}
Requires: sqlite3 nspr >= 4.8
Libs: -L/usr/lib${LIBDIRSUFFIX} -lssl3 -lsmime3 -lnss3 -lnssutil3
Cflags: -I/usr/include/nss

EOF

# On re-déballe et on se re-place dans les sources :
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On re-vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige la prise en charge des LDFLAGS :
sed -i 's@\$(MKSHLIB) -o@\$(MKSHLIB) \$(LDFLAGS) -o@g' mozilla/security/coreconf/rules.mk

# On positionne USE_ARCH :
export USE_ARCH=64

# Compilation pour 64 bits :
# Les CFLAGS plantent la compilation.
LIBDIRSUFFIX="64"
for rep in mozilla/security/{coreconf,dbm,nss}; do
	CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
	PKG_CONFIG_PATH="${PKG_CONFIG_PATH64}" \
	LDFLAGS="-L/usr/lib${LIBDIRSUFFIX} -L/lib${LIBDIRSUFFIX}" \
	NSPR_INCLUDE_DIR="/usr/include/nspr" USE_64=1 \
	BUILD_OPT=1 NSS_USE_SYSTEM_SQLITE=1 FREEBL_NO_DEPEND=1 \
	make -C ${rep}
done

# On neutralise USE_ARCH :
unset USE_ARCH

# 'make install' à la main !
install -m755 mozilla/dist/*.OBJ/lib/lib*3.so ${PKG}/usr/lib${LIBDIRSUFFIX}
install -m644 mozilla/dist/*.OBJ/lib/*.a ${PKG}/usr/lib${LIBDIRSUFFIX}
install -m644 mozilla/dist/public/nss/*.h ${PKG}/usr/include/nss3
ln -sf nss3 ${PKG}/usr/include/nss

for binaire in certutil cmsutil crlutil modutil pk12util signtool signver ssltap; do
	install -m755 mozilla/dist/*.OBJ/bin/${binaire} ${PKG}/usr/bin
done

# On crée le fichier pour 'pkg-config' :
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/nss.pc << EOF
prefix=/usr
exec_prefix=/usr/bin
libdir=/usr/lib
includedir=/usr/include/nss3

Name: NSS
Description: Network Security Services
Version: ${VERSION}
Requires: sqlite3 nspr >= 4.8
Libs: -L/usr/lib${LIBDIRSUFFIX} -lssl3 -lsmime3 -lnss3 -lnssutil3
Cflags: -I/usr/include/nss

EOF

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

config() {
	NEW="$1"
	OLD="$(dirname $NEW)/$(basename $NEW .new)"
	
	if [ ! -r $OLD ]; then
		mv $NEW $OLD
	elif [ "$(diff -abBEiw $OLD $NEW)" = "" ]; then
		mv $NEW $OLD
	fi
}

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true

# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

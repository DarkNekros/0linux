#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)

# On définit la catégorie du paquet :
for categ in base extra opt xfce xorg; do
	if [ ! "$(echo $(dirname $CWD) | grep $categ)" = "" ]; then
		PKGCAT="$categ"
	fi
done

NAMESRC=${NAMESRC:-gnome-colors}
VERSION=${VERSION:-5.5.1}
EXT=${EXT:-tar.gz}
NAMETGZ=${NAMETGZ:-gnome-colors}
BUILD=${BUILD:-7}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets/$PKGCAT}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-http://gnome-colors.googlecode.com/files/$NAMESRC-$VERSION.$EXT}
WGETEXTRAS=${WGETEXTRAS:-http://gnome-colors.googlecode.com/files/$NAMESRC-extras-$VERSION.$EXT}
WGETSHIKI=${WGETSHIKI:-http://gnome-colors.googlecode.com/files/shiki-colors-murrine-4.6.$EXT}

DOC="AUTHORS ChangeLog COPYING README"
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Ensembles de thèmes et icônes assortis"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then
	echo "La description est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On télécharge les extras :
if [ ! -r ${NAMESRC}-extras-${VERSION}.$EXT ]; then
	wget -vc $WGETEXTRAS -O ${NAMESRC}-extras-${VERSION}.$EXT.part
	mv ${NAMESRC}-extras-${VERSION}.$EXT.part ${NAMESRC}-extras-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-extras-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On télécharge les thèmes Shiki :
if [ ! -r shiki-colors-murrine-4.6.$EXT ]; then
	wget -vc $WGETSHIKI -O shiki-colors-murrine-4.6.$EXT.part
	mv shiki-colors-murrine-4.6.$EXT{.part,}
fi

# On les vérifie :
tar ft shiki-colors-murrine-4.6.$EXT 1> /dev/null 2> /dev/null

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}/usr/share/themes

# On déballe et on se place dans les sources :
cd $TMP
mkdir -p $TMP/gnomecolors
cd $TMP/gnomecolors
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
tar xf $CWD/${NAMESRC}-extras-${VERSION}.$EXT

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On installe les thèmes :
fakeroot make install-unbranded DESTDIR=${PKG}

# On déballe et on se place dans les sources de Shiki :
cd $TMP
mkdir -p $TMP/shiki
cd $TMP/shiki
echo "Extraction en cours..."
tar xf $CWD/shiki-colors-murrine-4.6.$EXT

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On installe les thèmes Shiki :
sed -i "s@usr/share/backgrounds@usr/share/wallpapers@" Makefile
fakeroot make install DESTDIR=${PKG}

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# Installation de la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
cp -a ${DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
cp -a $TMP/shiki/userChrome.css ${PKG}/usr/doc/${NAMETGZ}-${VERSION}

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/usr/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

config() {
	NEW="$1"
	OLD="$(dirname $NEW)/$(basename $NEW .new)"
	
	if [ ! -r $OLD ]; then
		mv $NEW $OLD
	elif [ "$(diff -abBEiw $OLD $NEW)" = "" ]; then
		mv $NEW $OLD
	fi
}

# On corrige l'apparence des applications Mozilla en copiant le fichier 
# CSS de Shiki directement dans les préférences utilisateur, si aucun fichier
# ne s'y trouve déjà :
for rep in $(find /home/*/.mozilla -type d -name "*.default"); do
	if [ -d ${rep}/chrome ]; then
		if [ ! -e ${rep}/chrome/userChrome.css ]; then
			cp -a /usr/doc/gnome-colors-*/userChrome.css ${rep}/chrome/
		fi
	fi
done

if [ -x usr/bin/update-desktop-database ]; then
	chroot . /usr/bin/update-desktop-database &> /dev/null
fi

if [ -x /usr/bin/update-mime-database ]; then
	chroot . /usr/bin/update-mime-database /usr/share/mime >/dev/null 2>&1
fi

if [ -x usr/bin/gtk-update-icon-cache ]; then
	chroot . /usr/bin/gtk-update-icon-cache -f -t /usr/share/icons/hicolor 1>/dev/null 2>&1
fi

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true

# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spackpkg . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	rm -rf $TMP/gnomecolors
	rm -rf $TMP/shiki"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

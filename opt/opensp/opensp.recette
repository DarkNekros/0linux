#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)
PKGCAT=opt
NAMESRC=${NAMESRC:-OpenSP}
VERSION=${VERSION:-1.5.2}
EXT=${EXT:-tar.gz}
NAMETGZ=${NAMETGZ:-opensp}
BUILD=${BUILD:-2}


TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets/$PKGCAT}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-http://downloads.sourceforge.net/project/openjade/opensp/1.5.2/OpenSP-1.5.2.tar.gz?use_mirror=freefr}
DOC="ABOUT-NLS AUTHORS BUGS ChangeLog COPYING INSTALL NEWS README "
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Bibliothèques d'analyse et de validation SGML et XML"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then # -1 pour l'UTF-8
	echo "La description du slack-desc est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige une erreur de segmentation ennuyante :
cat $CWD/opensp-sigsegv.patch | patch -p1

# On positionne USE_ARCH :
export USE_ARCH=32

sed -i 's:32,:253,:' lib/Syntax.cxx
sed -i 's:LITLEN          240 :LITLEN          8092:' unicode/{gensyntax.pl,unicode.syn}

# Compilation pour 32 bits :
SLKCFLAGS="-O2 -march=i686 -pipe"
LIBDIRSUFFIX=""
CC="gcc ${BUILD32}" CXX="g++ ${BUILD32}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH32}" \
./configure \
	--prefix=/usr \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--mandir=/usr/man \
	--infodir=/usr/info \
	--disable-doc-build \
	--enable-default-catalog=/etc/sgml/catalog \
	--enable-http \
	--enable-default-search-path=/usr/share/sgml \
	--build=${TARGET32}

make -j3 || make
make install DESTDIR=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On relie OpenJade à OpenSP :
ln -sf libosp.so ${PKG}/usr/lib${LIBDIRSUFFIX}/libsp.so

# On renomme l'entête 32 bits pour l'envelopper :
mv ${PKG}/usr/include/OpenSP/config{,-32}.h

# On re-déballe et on se re-place dans les sources :
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On re-vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige une erreur de segmentation ennuyante :
cat $CWD/opensp-sigsegv.patch | patch -p1

# On positionne USE_ARCH :
export USE_ARCH=64

sed -i 's:32,:253,:' lib/Syntax.cxx
sed -i 's:LITLEN          240 :LITLEN          8092:' unicode/{gensyntax.pl,unicode.syn}

# Compilation pour 64 bits :
SLKCFLAGS="-O2 -fPIC -pipe"
LIBDIRSUFFIX="64"
CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH64}" \
./configure \
	--prefix=/usr \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--mandir=/usr/man \
	--infodir=/usr/info \
	--disable-doc-build \
	--enable-default-catalog=/etc/sgml/catalog \
	--enable-http \
	--enable-default-search-path=/usr/share/sgml \
	--build=${TARGET64}

make pkgdatadir=/usr/share/sgml/${NAMETGZ}-${VERSION}
make install DESTDIR=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On relie OpenJade à OpenSP :
ln -sf libosp.so ${PKG}/usr/lib${LIBDIRSUFFIX}/libsp.so

# On renomme l'entête 64 bits pour l'envelopper :
mv ${PKG}/usr/include/OpenSP/config{,-64}.h

# On crée un faux entête pour envelopper les 'config.h' :
cat > ${PKG}/usr/include/OpenSP/config.h << "EOF"
#ifndef __STUB__CONFIG_H__
#define __STUB__CONFIG_H__

#if defined(__x86_64__)
# include "config-64.h"
#else
# include "config-32.h"
#endif

#endif

EOF

# On renomme 'osx' en 'osgml2xml' et on n'oublie pas de créer un lien :
mv -f ${PKG}/usr/bin/{osx,osgml2xml}
ln -sf osgml2xml ${PKG}/usr/bin/osx

# On crée tous les liens symboliques vers les binaires en "o*" :
for binaire in nsgmls sgmlnorm spam spcat spent sgml2xml ; do
	rm -f ${PKG}/usr/bin/$binaire
	ln -sf o$binaire ${PKG}/usr/bin/$binaire
done

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# Installation de la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/html
cp -a ${DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
mv ${PKG}/usr/share/doc/${NAMESRC}/doc/* ${PKG}/usr/doc/${NAMETGZ}-${VERSION}/html
rm -rf ${PKG}/usr/share/doc

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/usr/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

config() {
	NEW="$1"
	OLD="$(dirname $NEW)/$(basename $NEW .new)"
	
	if [ ! -r $OLD ]; then
		mv $NEW $OLD
	elif [ "$(diff -abBEiw $OLD $NEW)" = "" ]; then
		mv $NEW $OLD
	fi
}

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true




# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	
	/sbin/spackpkg . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

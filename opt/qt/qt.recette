#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

# Ce paquet ne compile pas en 4.6.2 si aucun 'qt' n'est présent sur le système !
# J'ai dû copier les bibliothèques libQt* de /tmp/(sources de qt)/lib dans /usr/lib
# lors du plantage 32 bits et ces mêmes bibliothèques dans /usr/lib64 lors du
# plantage 64 bits... Puis recompiler.

set -e
umask 022
CWD=$(pwd)
PKGCAT=opt
NAMESRC=${NAMESRC:-qt-everywhere-opensource-src}
VERSION=${VERSION:-4.6.2}
EXT=${EXT:-tar.gz}
NAMETGZ=${NAMETGZ:-qt}
BUILD=${BUILD:-2}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets/$PKGCAT}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-ftp://ftp.qt.nokia.com/qt/source/$NAMESRC-$VERSION.$EXT}
DOC="changes* LGPL* INSTALL README"
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Outils et bibliothèques de création d'interfaces graphiques"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then # -1 pour l'UTF-8
	echo "La description du slack-desc est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}/usr/share/qt

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige le chemin de X11 codé en dur :
for fichier in $(grep -lr "X11R6" *); do
	sed -i "s@/usr/X11R6@/usr@g" $fichier
done

# On positionne USE_ARCH :
export USE_ARCH=32

# Compilation pour 32 bits :
export QMAKESPEC=linux-g++-32
SLKCFLAGS="-O2 -march=i686 -pipe"
LIBDIRSUFFIX=""

# On force les drapeaux d'optimisation 32 bits pour 'qmake' :
sed -i "s@QMAKE_CFLAGS_RELEASE	+= -O2@& -march=i686 -pipe@" mkspecs/common/g++.conf

echo "o
yes" | CC="gcc ${BUILD32}" CXX="g++ ${BUILD32}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH32}" \
./configure -prefix /usr \
	-libdir /usr/lib${LIBDIRSUFFIX} \
	-docdir /usr/doc/${NAMETGZ}-${VERSION} \
	-L/usr/lib${LIBDIRSUFFIX} \
	-plugindir /usr/lib${LIBDIRSUFFIX}/plugins \
	-datadir /usr/lib${LIBDIRSUFFIX} \
	-translationdir /usr/share/qt/translations \
	-no-separate-debug-info \
	-optimized-qmake \
	-release \
	-nomake demos \
	-nomake examples \
	-fast

make -j3 || make
fakeroot make install INSTALL_ROOT=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On neutralise QMAKESPEC :
unset QMAKESPEC

# On renomme les binaires et entêtes 32 bits pour les envelopper :
mv ${PKG}/usr/bin/qmake{,-32}
mv ${PKG}/usr/bin/uic{,-32}
mv ${PKG}/usr/bin/uic3{,-32}
mv ${PKG}/usr/bin/moc{,-32}
mv ${PKG}/usr/include/Qt/qconfig{,-32}.h
mv ${PKG}/usr/include/QtCore/qconfig{,-32}.h

# On re-déballe et on se re-place dans les sources :
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On re-vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige le chemin de X11 codé en dur :
for fichier in $(grep -lr "X11R6" *); do
	sed -i "s@/usr/X11R6@/usr@g" $fichier
done

# On positionne USE_ARCH :
export USE_ARCH=64

# Compilation pour 64 bits :
export QMAKESPEC=linux-g++-64
SLKCFLAGS="-O2 -fPIC -pipe"
LIBDIRSUFFIX="64"

# On force les drapeaux d'optimisation 32 bits pour 'qmake' :
sed -i "s@QMAKE_CFLAGS_RELEASE	+= -O2@& -fPIC -pipe@" mkspecs/common/g++.conf

echo "o
yes" | CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH64}" \
./configure -prefix /usr \
	-libdir /usr/lib${LIBDIRSUFFIX} \
	-docdir /usr/doc/${NAMETGZ}-${VERSION} \
	-L/usr/lib${LIBDIRSUFFIX} \
	-plugindir /usr/lib${LIBDIRSUFFIX}/plugins \
	-datadir /usr/lib${LIBDIRSUFFIX} \
	-translationdir /usr/share/qt/translations \
	-no-separate-debug-info \
	-optimized-qmake \
	-release \
	-nomake demos \
	-nomake examples \
	-fast

make -j3 || make
fakeroot make install INSTALL_ROOT=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On neutralise QMAKESPEC :
unset QMAKESPEC

# On renomme les binaires et entêtes 64 bits pour les envelopper :
mv ${PKG}/usr/bin/qmake{,-64}
mv ${PKG}/usr/bin/uic{,-64}
mv ${PKG}/usr/bin/uic3{,-64}
mv ${PKG}/usr/bin/moc{,-64}
mv ${PKG}/usr/include/Qt/qconfig{,-64}.h
mv ${PKG}/usr/include/QtCore/qconfig{,-64}.h

# On lie de faux binaires au programme enveloppe :
ln -sf multiarch_wrapper ${PKG}/usr/bin/qmake
ln -sf multiarch_wrapper ${PKG}/usr/bin/uic
ln -sf multiarch_wrapper ${PKG}/usr/bin/uic3
ln -sf multiarch_wrapper ${PKG}/usr/bin/moc

# On crée un faux entête pour Qt 'qconfig.h' :
cat > ${PKG}/usr/include/Qt/qconfig.h << "EOF"
#ifndef __STUB__QCONFIG_H__
#define __STUB__QCONFIG_H__

#if defined(__x86_64__)
# include "qconfig-64.h"
#else
# include "qconfig-32.h"
#endif

#endif

EOF

# On crée un autre faux entête pour /usr/inlude/QtCore/qconfig.h :
cat > ${PKG}/usr/include/QtCore/qconfig.h << "EOF"
#ifndef __STUB__QCONFIG_H__
#define __STUB__QCONFIG_H__

#if defined(__x86_64__)
# include "qconfig-64.h"
#else
# include "qconfig-32.h"
#endif

#endif

EOF

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# Installation de la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
cp -a ${DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/usr/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true




# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spackpkg . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0

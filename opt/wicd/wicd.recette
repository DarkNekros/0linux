#!/usr/bin/env bash
# Voyez le fichier LICENCES pour connaître la licence de ce script.

set -e
umask 022
CWD=$(pwd)

# On définit la catégorie du paquet :
for categ in base extra opt xfce xorg; do
if [ ! "$(echo $(dirname $CWD) | grep $categ)" = "" ]; then
PKGCAT="$categ"
fi
done


NAMESRC=${NAMESRC:-wicd}
VERSION=${VERSION:-1.7.0}
EXT=${EXT:-tar.bz2}
NAMETGZ=${NAMETGZ:-wicd}
BUILD=${BUILD:-3}

TMP=${TMP:-/tmp}
OUT=${OUT:-/usr/local/paquets/$PKGCAT}
ARCH=${ARCH:-x86_64}
TARGET32=${TARGET32:-i686-0-linux-gnu}
TARGET64=${TARGET64:-$ARCH-0-linux-gnu}
BUILD32=${BUILD32:--m32}
BUILD64=${BUILD64:--m64}
PKG_CONFIG_PATH32=${PKG_CONFIG_PATH32:-/usr/lib/pkgconfig}
PKG_CONFIG_PATH64=${PKG_CONFIG_PATH64:-/usr/lib64/pkgconfig}

WGET=${WGET:-http://prdownloads.sourceforge.net/$NAMESRC/$NAMESRC-$VERSION.$EXT}
DOC="AUTHORS CHANGES INSTALL LICENSE NEWS README"
########## |-----handy-ruler------------------------------------------------------|
SLACKDESC="Gestionnaire graphique de connexions réseau"
########################################

SLACKDESCCHARS=`echo ${SLACKDESC} | wc -m`
if [ $(echo "${SLACKDESCCHARS} -1" | bc) -ge 80 ]; then # -1 pour l'UTF-8
	echo "La description du slack-desc est trop longue (80 caractères max.) !"
	exit 1
fi

# On télécharge les sources :
if [ ! -r ${NAMESRC}-${VERSION}.$EXT ]; then
	wget -vc $WGET -O ${NAMESRC}-${VERSION}.$EXT.part
	mv ${NAMESRC}-${VERSION}.$EXT.part ${NAMESRC}-${VERSION}.$EXT
fi

# On les vérifie :
tar ft ${NAMESRC}-${VERSION}.$EXT 1> /dev/null 2> /dev/null

# On crée le répertoire d'accueil :
PKG=$TMP/build/${NAMETGZ}
mkdir -p ${PKG}/etc/rc.d

# On déballe et on se place dans les sources :
NAME=$(tar ft ${NAMESRC}-${VERSION}.$EXT | head -n 1 | awk -F/ '{ print $1 }')
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige un bogue gênant :
cat $CWD/wicd.bug-macro.patch | patch -p0

# On positionne USE_ARCH :
export USE_ARCH=32

# Compilation pour 32 bits :
SLKCFLAGS="-O2 -march=i686 -pipe"
LIBDIRSUFFIX=""
CC="gcc ${BUILD32}" CXX="g++ ${BUILD32}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH32}" \
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX} -L/lib${LIBDIRSUFFIX}" \
python setup.py configure \
	--lib=/usr/lib${LIBDIRSUFFIX}/wicd/ \
	--backends=/usr/lib${LIBDIRSUFFIX}/wicd/backends/ \
	--mandir=/usr/man/ \
	--docdir=/usr/doc/${NAMETGZ}-${VERSION}/ \
	--no-install-init \
	--resume=/usr/share/wicd/scripts/ \
	--suspend=/usr/share/wicd/scripts/ \
	--verbose

fakeroot python setup.py install --root=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On place nos modules Python en lieu sûr :
mkdir -p ${PKG}/usr/lib32
cp -ra ${PKG}/usr/lib/python2.6 ${PKG}/usr/lib32

# On re-déballe et on se re-place dans les sources :
cd $TMP
rm -rf ${NAME}
echo "Extraction en cours..."
tar xf $CWD/${NAMESRC}-${VERSION}.$EXT
cd ${NAME}

# On re-vérifie les permissions des sources :
find . \
	\( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) -exec chmod 755 {} \; -o \
	\( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# On corrige un bogue gênant :
cat $CWD/wicd.bug-macro.patch | patch -p0

# On positionne USE_ARCH :
export USE_ARCH=64

# Compilation pour 64 bits :
SLKCFLAGS="-O2 -fPIC -pipe"
LIBDIRSUFFIX="64"
CC="gcc ${BUILD64}" CXX="g++ ${BUILD64}" \
CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" \
PKG_CONFIG_PATH="${PKG_CONFIG_PATH64}" \
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX} -L/lib${LIBDIRSUFFIX}" \
python setup.py configure \
	--lib=/usr/lib${LIBDIRSUFFIX}/wicd/ \
	--backends=/usr/lib${LIBDIRSUFFIX}/wicd/backends/ \
	--mandir=/usr/man/ \
	--docdir=/usr/doc/${NAMETGZ}-${VERSION}/ \
	--no-install-init \
	--resume=/usr/share/wicd/scripts/ \
	--suspend=/usr/share/wicd/scripts/ \
	--verbose

fakeroot python setup.py install --root=${PKG}

# On neutralise USE_ARCH :
unset USE_ARCH

# On place nos modules Python 64 bits où il faut et on récupère nos modules 32 bits :
mkdir -p ${PKG}/usr/lib64
cp -ra ${PKG}/usr/lib/python2.6 ${PKG}/usr/lib64
cp -ra ${PKG}/usr/lib32/python2.6 ${PKG}/usr/lib
rm -rf ${PKG}/usr/lib32

# On crée le fichier de configuration en affectant d'office le client 'dhcpcd'
# pour la connexion et 'ktsuss' pour le 'su' graphique tout en veillant
# à ne rien écraser :
cat > ${PKG}/etc/wicd/manager-settings.conf.new << "EOF"
[Settings]
dhcp_client = 2
sudo_app = 3

EOF

# On veille à ne rien écraser concernant 'd-bus' et le fichier service:
mv ${PKG}/etc/dbus-1/system.d/wicd.conf{,.new}
cp -a $CWD/rc.wicd ${PKG}/etc/rc.d/rc.wicd.new
chmod 755 ${PKG}/etc/rc.d/rc.wicd.new

# On supprime le superflu le cas échéant:
rm -rf ${PKG}/usr/share/autostart

# On compresse les manuels :
if [ -d ${PKG}/usr/man ]; then
	find ${PKG}/usr/man -type f -name "*.*" -exec gzip -9 {} \;
	for manpage in $(find ${PKG}/usr/man -type l) ; do
		ln -s $(readlink $manpage).gz ${manpage}.gz
		rm -f ${manpage}
	done
fi

# On compresse les pages info :
if [ -d ${PKG}/usr/info ]; then
	rm -f ${PKG}/usr/info/dir
	gzip -9 ${PKG}/usr/info/*.info*
fi

# Installation de la documentation :
mkdir -p ${PKG}/usr/doc/${NAMETGZ}-${VERSION}
cp -a ${DOC} ${PKG}/usr/doc/${NAMETGZ}-${VERSION}

# On installe le slack-desc :
mkdir -p ${PKG}/install
echo "${NAMETGZ}: ${NAMETGZ} (${SLACKDESC})" > ${PKG}/install/slack-desc

# On installe le doinst.sh :
cat > ${PKG}/install/doinst.sh << "EOF"
#!/usr/bin/env bash
if [ -x sbin/ldconfig ]; then
	sbin/ldconfig -r .
fi

config() {
	NEW="$1"
	OLD="$(dirname $NEW)/$(basename $NEW .new)"
	
	if [ ! -r $OLD ]; then
		mv $NEW $OLD
	elif [ "$(diff -abBEiw $OLD $NEW)" = "" ]; then
		mv $NEW $OLD
	fi
}

if [ -x usr/bin/update-desktop-database ]; then
	chroot . /usr/bin/update-desktop-database &> /dev/null
fi

if [ -x usr/bin/gtk-update-icon-cache ]; then
	chroot . /usr/bin/gtk-update-icon-cache -f -t /usr/share/icons/hicolor 1>/dev/null 2>&1
fi

config etc/wicd/manager-settings.conf.new
config etc/rc.d/rc.wicd.new
config etc/dbus-1/system.d/wicd.conf.new

EOF

# On "strippe" tout ce qu'on trouve :
find ${PKG} -type f | xargs file | grep "LSB executable" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "shared object" | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find ${PKG} -type f | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip -g 2> /dev/null || true

# On vérifie enfin les droits de la doc, souvent problématiques :
find ${PKG}/usr/{doc,man,info} -type d -exec chmod 755 {} \; 2> /dev/null || true
find ${PKG}/usr/{doc,man,info} -type f -exec chmod 644 {} \; 2> /dev/null || true




# Empaquetage !
cd ${PKG}
mkdir -p $OUT
PACKAGING="
	chown root:root . -R
	/sbin/spkcpio . $OUT/${NAMETGZ}-${VERSION}-${ARCH}-$BUILD
	rm -rf ${PKG}
	if [ ! \"X${NAME}\" = \"X\" ]; then
		if [ -d $TMP/${NAME} ]; then
			rm -rf $TMP/${NAME}
		fi
	fi"

if [ "$(which fakeroot 2> /dev/null)" ]; then
	echo "${PACKAGING}" | fakeroot
else
	su -c "${PACKAGING}"
fi

exit 0
